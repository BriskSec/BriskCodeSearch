[
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "File MODE_WORLD_READABLE for file access on Android, see https://developer.android.com/reference/android/content/Context.html",
        "example": "MODE_WORLD_READABLE",
        "regex": "MODE_WORLD_READABLE",
        "output_file": "1_android_access_mode-world-readable.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "File MODE_WORLD_WRITEABLE for file access on Android, see https://developer.android.com/reference/android/content/Context.html",
        "example": "MODE_WORLD_WRITEABLE",
        "regex": "MODE_WORLD_WRITEABLE",
        "output_file": "1_android_access_mode-world-writeable.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Insecure hostname verification.",
        "example": "ALLOW_ALL_HOSTNAME_VERIFIER",
        "regex": "ALLOW_ALL_HOSTNAME_VERIFIER",
        "output_file": "1_android_ssl_hostname_verifier.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Debuggable webview, see https://developer.chrome.com/devtools/docs/remote-debugging#debugging-webviews",
        "example": ".setWebContentsDebuggingEnabled(",
        "regex": "\\.setWebContentsDebuggingEnabled\\(",
        "output_file": "1_android_setWebContentsDebuggingEnabled.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Dexguard has methods to do temper detection/root detection.",
        "example": "int check = dexguard.util.TamperDetector.checkApk(context);",
        "regex": "TamperDetector",
        "output_file": "2_android_dexguar_TamperDetector.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Dexguard has methods to check if the app was repacked.",
        "example": "int check = dexguard.util.CertificateChecker.checkCertificate(context);",
        "regex": "CertificateChecker",
        "output_file": "2_android_dexguar_CertificateChecker.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Registering receivers manually means that every Intent that is sent and matches the specified filter. Can be dangerous. See http://resources.infosecinstitute.com/android-hacking-security-part-3-exploiting-broadcast-receivers/",
        "example": "registerReceiver(",
        "regex": "registerReceiver\\(",
        "output_file": "2_android_intents_intent-filter_registerReceiver.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Changing the security settings of WebViews could allow malicious contents in the WebView to read private data, etc.",
        "example": "setAllowUniversalAccessFromFileURLs",
        "regex": "setAllowUniversalAccessFromFileURLs",
        "output_file": "2_android_webview_setAllowUniversalAccessFromFileURLs.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Changing the security settings of WebViews could allow malicious contents in the WebView to read private data, etc.",
        "example": "setAllowFileAccess",
        "regex": "setAllowFileAccess",
        "output_file": "2_android_webview_setAllowFileAccess.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Probably the singlemost effective root-detection mechanism, implemented by Google itself, SafetyNet. See https://developer.android.com/training/safetynet/index.html and https://koz.io/inside-safetynet/ .",
        "example": "mGoogleApiClient = new GoogleApiClient.Builder(this).addApi(SafetyNet.API)",
        "regex": "SafetyNet",
        "output_file": "2_android_SafetyNet.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Probably the singlemost effective root-detection mechanism, implemented by Google itself, SafetyNet. See https://developer.android.com/training/safetynet/index.html and https://koz.io/inside-safetynet/ .",
        "example": "public void onResult(SafetyNetApi.AttestationResult result) {",
        "regex": "AttestationResult",
        "output_file": "2_android_AttestationResult.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "File MODE_PRIVATE for file access on Android, see https://developer.android.com/reference/android/content/Context.html",
        "example": "MODE_PRIVATE",
        "regex": "MODE_PRIVATE",
        "output_file": "3_android_access_mode-private.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "RawQuery. If the first argument to rawQuery is a user suplied input, it's an SQL injection.",
        "example": "rawQuery(",
        "regex": "rawQuery\\(",
        "output_file": "3_android_access_rawQuery.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "RawQueryWithFactory. If the second argument to rawQueryWithFactory is a user suplied input, it's an SQL injection.",
        "example": "rawQueryWithFactory(",
        "regex": "rawQueryWithFactory\\(",
        "output_file": "3_android_access_rawQueryWithFactory.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Android compile SQL statement",
        "example": "compileStatement(",
        "regex": "compileStatement\\(",
        "output_file": "3_android_access_compileStatement.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Registering receivers and sending broadcasts can be dangerous when exported (which is the case here). See http://resources.infosecinstitute.com/android-hacking-security-part-3-exploiting-broadcast-receivers/",
        "example": "android:exported=true",
        "regex": "android:exported.{0,$WILDCARD_SHORT}true",
        "output_file": "3_android_intents_intent-filter_exported.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Sending broadcasts can be dangerous. See http://resources.infosecinstitute.com/android-hacking-security-part-3-exploiting-broadcast-receivers/",
        "example": "sendBroadcast(",
        "regex": "sendBroadcast\\(",
        "output_file": "3_android_intents_intent-filter_sendBroadcast.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Methods to overwrite SSL certificate checks.",
        "example": "X509TrustManager",
        "regex": "X509TrustManager",
        "output_file": "3_android_ssl_x509TrustManager.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Implementation of SSL trust settings.",
        "example": "implements TrustStrategy",
        "regex": "implements TrustStrategy",
        "output_file": "3_android_ssl_trustStrategy.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Android Hardware-Backed Key Store function to set time until Key is locked again",
        "example": "setUserAuthenticationValidityDurationSeconds",
        "regex": "setUserAuthenticationValidityDurationSeconds",
        "output_file": "3_android_setUserAuthenticationValidityDurationSeconds.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Used to query other appps or let them query, see http://developer.android.com/guide/topics/providers/content-provider-basics.html",
        "example": "ContentResolver",
        "regex": "ContentResolver",
        "output_file": "3_android_contentResolver.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Changing the security settings of WebViews could allow malicious contents in the WebView to read private data, etc.",
        "example": ".setAllow(",
        "regex": "\\.setAllow\\(",
        "output_file": "3_android_webview_setAllow.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "/system is the path where a lot of binaries are stored. So whenever an Android app does something like executing a binary such as /system/xbin/which with an absolut path. Often used in root-detection mechanisms.",
        "example": "/system/xbin/which",
        "regex": "/system",
        "output_file": "3_android_system_path.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Often used in root-detection mechanisms.",
        "example": "Superuser.apk",
        "regex": "Superuser.apk",
        "output_file": "3_android_superuser_apk.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Often used in root-detection mechanisms.",
        "example": "eu.chainfire.supersu",
        "regex": "supersu",
        "output_file": "3_android_supersu.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Often used in root-detection mechanisms. geprop ro.secure on an adb shell can be used to check. If ro.secure=0, an ADB shell will run commands as the root user on the device. But if ro.secure=1, an ADB shell will run commands as an unprivileged user on the device.",
        "example": "ro.secure",
        "regex": "ro\\.secure",
        "output_file": "3_android_ro.secure.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Often used in root-detection mechanisms, checks if debugger is connected.",
        "example": "android.os.Debug.isDebuggerConnected()",
        "regex": "isDebuggerConnected",
        "output_file": "3_android_isDebuggerConnected.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Android startActivity starts another Activity",
        "example": "startActivity(intent);",
        "regex": "startActivity\\(",
        "output_file": "4_android_intents_startActivity.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Android get intent",
        "example": ".getIntent(",
        "regex": "\\.getIntent\\(",
        "output_file": "4_android_intents_getIntent.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Android get data from an intent",
        "example": ".getData(",
        "regex": "\\.getData\\(",
        "output_file": "4_android_intents_getData.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Java URI parsing. Often used in Android for an intent, where it is important to specify the receiving package with setPackage as well, so that no other app could receive the intent.",
        "example": "Uri u = Uri.parse(scheme+\"://somepath\");",
        "regex": "Uri.parse\\(",
        "output_file": "4_android_uri_parse.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Android set data for an intent. It is important to specify the receiving package with setPackage as well, so that no other app could receive the intent.",
        "example": ".setData(",
        "regex": "\\.setData\\(",
        "output_file": "4_android_intents_setData.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Android get info about running processes",
        "example": "RunningAppProcessInfo",
        "regex": "RunningAppProcessInfo",
        "output_file": "4_android_intents_RunningAppProcessInfo.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "The Key Store provider AndroidKeyStore allows to do hardware-backed storage of Secret Keys (on supported hardware), see https://developer.android.com/training/articles/keystore.html",
        "example": "KeyPairGenerator kpg = KeyPairGenerator.getInstance(KeyProperties.KEY_ALGORITHM_EC, \"AndroidKeyStore\");",
        "regex": "AndroidKeyStore",
        "output_file": "4_android_AndroidKeyStore.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "File system access is often enabled WebViews. Private files could be read by malicious contents. Eg. file://data/data/ch.example/secret.txt",
        "example": ".loadData(",
        "regex": "\\.loadData\\(",
        "output_file": "4_android_webview_loadData.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "File system access is often enabled WebViews. Private files could be read by malicious contents. Eg. file://data/data/ch.example/secret.txt",
        "example": ".loadUrl(",
        "regex": "\\.loadUrl\\(",
        "output_file": "4_android_webview_loadUrl.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "If an Android app wants to specify how the app is backuped, you use BackupAgent to interfere... Often shows which sensitive data is not written to the backup. See https://developer.android.com/reference/android/app/backup/BackupAgent.html",
        "example": "new BackupAgent()",
        "regex": "BackupAgent",
        "output_file": "4_android_backupAgent.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Opening files via URI on Android, see https://developer.android.com/reference/android/content/ContentProvider.html#openFile%28android.net.Uri,%20java.lang.String%29",
        "example": ".openFile(",
        "regex": "\\.openFile\\(",
        "output_file": "5_android_access_openFile.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Opening an asset files on Android, see https://developer.android.com/reference/android/content/ContentProvider.html",
        "example": ".openAssetFile(",
        "regex": "\\.openAssetFile\\(",
        "output_file": "5_android_access_openAssetFile.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Android database open or create",
        "example": ".openOrCreate",
        "regex": "\\.openOrCreate",
        "output_file": "5_android_access_openOrCreate.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Android get database",
        "example": ".getDatabase(",
        "regex": "\\.getDatabase\\(",
        "output_file": "5_android_access_getDatabase.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Android open database (and btw. a deprecated W3C standard that was never really implemented in a lot of browsers for JavaScript for local storage)",
        "example": ".openDatabase(",
        "regex": "\\.openDatabase\\(",
        "output_file": "5_android_access_openDatabase.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Get shared preferences on Android, see https://developer.android.com/reference/android/content/SharedPreferences.html",
        "example": ".getShared",
        "regex": "\\.getShared",
        "output_file": "5_android_access_getShared.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Get cache directory on Android, see https://developer.android.com/reference/android/content/Context.html",
        "example": "context.getCacheDir()",
        "regex": "\\.getCache",
        "output_file": "5_android_access_getCache.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Get code cache directory on Android, see https://developer.android.com/reference/android/content/Context.html",
        "example": ".getCodeCache",
        "regex": "\\.getCodeCache",
        "output_file": "5_android_access_getCodeCache.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Get external cache directory on Android has no security as it is on the SD card and the file system usually doesn't support permissions, see https://developer.android.com/reference/android/content/Context.html",
        "example": ".getExternalCacheDirs",
        "regex": "\\.getExternalCache",
        "output_file": "5_android_access_getExternalCache.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Get external file directory on Android has no security as it is on the SD card and the file system usually doesn't support permissions, see https://developer.android.com/reference/android/content/Context.html",
        "example": ".getExternalFilesDir",
        "regex": "\\.getExternalFile",
        "output_file": "5_android_access_getExternalFile.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Get external media directory on Android has no security as it is on the SD card and the file system usually doesn't support permissions, see https://developer.android.com/reference/android/content/Context.html",
        "example": ".getExternalMedia",
        "regex": "\\.getExternalMedia",
        "output_file": "5_android_access_getExternalMedia.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Do a query on Android",
        "example": ".query(",
        "regex": "query\\(",
        "output_file": "5_android_access_query.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Android get a key store, eg. to store private key or that include CA certificates used for TLS pinning, etc.",
        "example": "KeyStore",
        "regex": "KeyStore",
        "output_file": "5_android_keyStorage.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Acitivity flagged as new task, might lead to task hijacking: https://www.usenix.org/system/files/conference/usenixsecurity15/sec15-paper-ren-chuangang.pdf",
        "example": "intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);",
        "regex": "FLAG_ACTIVITY_NEW_TASK",
        "output_file": "5_android_FLAG_ACTIVITY_NEW_TASK.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "From http://developer.android.com/reference/android/util/Log.html : The order in terms of verbosity, from least to most is ERROR, WARN, INFO, DEBUG, VERBOSE. Verbose should never be compiled into an application except during development. Debug logs are compiled in but stripped at runtime. Error, warning and info logs are always kept.",
        "example": "Log.e(",
        "regex": "Log\\.e\\(",
        "output_file": "6_android_logging_error.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "From http://developer.android.com/reference/android/util/Log.html : The order in terms of verbosity, from least to most is ERROR, WARN, INFO, DEBUG, VERBOSE. Verbose should never be compiled into an application except during development. Debug logs are compiled in but stripped at runtime. Error, warning and info logs are always kept.",
        "example": "Log.w(",
        "regex": "Log\\.w\\(",
        "output_file": "6_android_logging_warning.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "From http://developer.android.com/reference/android/util/Log.html : The order in terms of verbosity, from least to most is ERROR, WARN, INFO, DEBUG, VERBOSE. Verbose should never be compiled into an application except during development. Debug logs are compiled in but stripped at runtime. Error, warning and info logs are always kept.",
        "example": "Log.i(",
        "regex": "Log\\.i\\(",
        "output_file": "6_android_logging_information.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "From http://developer.android.com/reference/android/util/Log.html : The order in terms of verbosity, from least to most is ERROR, WARN, INFO, DEBUG, VERBOSE. Verbose should never be compiled into an application except during development. Debug logs are compiled in but stripped at runtime. Error, warning and info logs are always kept.",
        "example": "Log.d(",
        "regex": "Log\\.d\\(",
        "output_file": "6_android_logging_debug.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "From http://developer.android.com/reference/android/util/Log.html : The order in terms of verbosity, from least to most is ERROR, WARN, INFO, DEBUG, VERBOSE. Verbose should never be compiled into an application except during development. Debug logs are compiled in but stripped at runtime. Error, warning and info logs are always kept.",
        "example": "Log.v(",
        "regex": "Log\\.v\\(",
        "output_file": "6_android_logging_verbose.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Angular.js has this Strict Contextual Escaping (SCE) that should prevent .",
        "example": "$sceProvider.enabled(false)",
        "regex": "sceProvider\\.enabled\\(",
        "output_file": "3_angularjs_sceprovider_enabled.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Buffer overflows and format string vulnerable methods: memcpy, memset, strcat --> strlcat, strcpy --> strlcpy, strncat --> strlcat, strncpy --> strlcpy, sprintf --> snprintf, vsprintf --> vsnprintf, gets --> fgets",
        "example": "memcpy(",
        "regex": "memcpy\\(",
        "output_file": "2_c_insecure_c_functions_memcpy.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Buffer overflows and format string vulnerable methods: memcpy, memset, strcat --> strlcat, strcpy --> strlcpy, strncat --> strlcat, strncpy --> strlcpy, sprintf --> snprintf, vsprintf --> vsnprintf, gets --> fgets",
        "example": "memset(",
        "regex": "memset\\(",
        "output_file": "2_c_insecure_c_functions_memset.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Buffer overflows and format string vulnerable methods: memcpy, memset, strcat --> strlcat, strcpy --> strlcpy, strncat --> strlcat, strncpy --> strlcpy, sprintf --> snprintf, vsprintf --> vsnprintf, gets --> fgets",
        "example": "strncat(",
        "regex": "strn?cat\\(",
        "output_file": "2_c_insecure_c_functions_strcat_strncat.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Buffer overflows and format string vulnerable methods: memcpy, memset, strcat --> strlcat, strcpy --> strlcpy, strncat --> strlcat, strncpy --> strlcpy, sprintf --> snprintf, vsprintf --> vsnprintf, gets --> fgets",
        "example": "strncpy(",
        "regex": "strn?cpy\\(",
        "output_file": "2_c_insecure_c_functions_strcpy_strncpy.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Buffer overflows and format string vulnerable methods: memcpy, memset, strcat --> strlcat, strcpy --> strlcpy, strncat --> strlcat, strncpy --> strlcpy, sprintf --> snprintf, vsprintf --> vsnprintf, gets --> fgets",
        "example": "snprintf(",
        "regex": "sn?printf\\(",
        "output_file": "2_c_insecure_c_functions_sprintf_snprintf.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Buffer overflows and format string vulnerable methods: memcpy, memset, strcat --> strlcat, strcpy --> strlcpy, strncat --> strlcat, strncpy --> strlcpy, sprintf --> snprintf, vsprintf --> vsnprintf, gets --> fgets",
        "example": "fnprintf(",
        "regex": "fn?printf\\(",
        "output_file": "2_c_insecure_c_functions_fprintf_fnprintf.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Buffer overflows and format string vulnerable methods: memcpy, memset, strcat --> strlcat, strcpy --> strlcpy, strncat --> strlcat, strncpy --> strlcpy, sprintf --> snprintf, vsprintf --> vsnprintf, gets --> fgets. Additionally the format string should never be simple %s but rather %9s or similar to limit size that is read.",
        "example": "fscanf(",
        "regex": "f?scanf\\(",
        "output_file": "2_c_insecure_c_functions_fscanf_scanf.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Buffer overflows and format string vulnerable methods: memcpy, memset, strcat --> strlcat, strcpy --> strlcpy, strncat --> strlcat, strncpy --> strlcpy, sprintf --> snprintf, vsprintf --> vsnprintf, gets --> fgets",
        "example": "gets(",
        "regex": "gets\\(",
        "output_file": "2_c_insecure_c_functions_gets.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Random is not a secure random number generator",
        "example": "random(",
        "regex": "random\\(",
        "output_file": "2_c_random.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "malloc. Rather rare bug, but see issues CVE-2010-0041 and CVE-2010-0042. Uninitialized memory access issues? Could also happen in java/android native code. Also developers should check return codes.",
        "example": "malloc(",
        "regex": "malloc\\(",
        "output_file": "4_c_malloc.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "realloc. Rather rare bug, but see issues CVE-2010-0041 and CVE-2010-0042. Uninitialized memory access issues? Could also happen in java/android native code. Also developers should check return codes.",
        "example": "realloc(",
        "regex": "realloc\\(",
        "output_file": "4_c_realloc.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Narrow search for certificate and keys specifics of base64 encoded format",
        "example": "PRIVATE KEY",
        "regex": "PRIVATE KEY",
        "output_file": "1_cryptocred_certificates_and_keys_narrow_private-key.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "The Windows cmd.exe of adding a new user with a password written directly into the cmd.exe. Often found in bad-practice Windows batch scripts or log files.",
        "example": "net user ALongUserNameExampleHere ALongPaSSwOrdExampleHere /add",
        "regex": "net user.{0,$WILDCARD_LONG}/add",
        "output_file": "1_cryptocred_net_user_add.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Encryption key and variants of it",
        "example": "encrypt the key",
        "regex": "encrypt.{0,$WILDCARD_SHORT}key",
        "output_file": "2_cryptocred_encryption_key.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Sources of entropy: /dev/random and /dev/urandom",
        "example": "/dev/urandom",
        "regex": "/dev/u?random",
        "output_file": "2_cryptocred_dev_random.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Narrow search for certificate and keys specifics of base64 encoded format",
        "example": "BEGIN CERTIFICATE",
        "regex": "BEGIN CERTIFICATE",
        "output_file": "2_cryptocred_certificates_and_keys_narrow_begin-certificate.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Narrow search for certificate and keys specifics of base64 encoded format",
        "example": "PUBLIC KEY",
        "regex": "PUBLIC KEY",
        "output_file": "2_cryptocred_certificates_and_keys_narrow_public-key.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Default password",
        "example": "default-password",
        "regex": "default.?password",
        "output_file": "2_cryptocred_default_password.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Credentials. Included everything 'creden' because some programers write credencials instead of credentials and such things.",
        "example": "credentials=1234",
        "regex": "creden.{0,$WILDCARD_SHORT}=.?[\\\"'\\d]",
        "output_file": "2_cryptocred_credentials_narrow.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Passcode and variants of it",
        "example": "passcode = 123",
        "regex": "pass.?code.{0,$WILDCARD_SHORT}=.?[\\\"'\\d]",
        "output_file": "2_cryptocred_passcode_narrow.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Passphrase and variants of it",
        "example": "passphrase = \"123\"",
        "regex": "pass.?phrase.{0,$WILDCARD_SHORT}=.?[\\\"'\\d]",
        "output_file": "2_cryptocred_passphrase_narrow.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Secret and variants of it",
        "example": "secret = \"123\"",
        "regex": "se?3?cre?3?t.{0,$WILDCARD_SHORT}=.?[\\\"'\\d]",
        "output_file": "2_cryptocred_secret_narrow.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "PIN code and variants of it",
        "example": "pin code = \"123\"",
        "regex": "pin.?code.{0,$WILDCARD_SHORT}=.?[\\\"'\\d]",
        "output_file": "2_cryptocred_pin_code_narrow.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Crypt (the method itself) can be dangerous, also matches any calls to decrypt(, encrypt( or whatevercrypt(, which is desired",
        "example": "crypt(",
        "regex": "crypt\\(",
        "output_file": "3_cryptocred_crypt_call.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Rot32 is really really bad obfuscation and has nothing to do with crypto.",
        "example": "ROT32",
        "regex": "ROT32",
        "output_file": "3_cryptocred_ciphers_rot32.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "RC2 cipher. Security depends heavily on usage and what is secured.",
        "example": "RC2",
        "regex": "RC2",
        "output_file": "3_cryptocred_ciphers_rc2.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "RC4 cipher. Security depends heavily on usage and what is secured.",
        "example": "RC4",
        "regex": "RC4",
        "output_file": "3_cryptocred_ciphers_rc4.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "CRC32 is a checksum algorithm. Security depends heavily on usage and what is secured.",
        "example": "CRC32",
        "regex": "CRC32",
        "output_file": "3_cryptocred_ciphers_crc32.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "DES cipher. Security depends heavily on usage and what is secured.",
        "example": "DES",
        "regex": "DES",
        "output_file": "3_cryptocred_ciphers_des.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "MD2. Security depends heavily on usage and what is secured.",
        "example": "MD2",
        "regex": "MD2",
        "output_file": "3_cryptocred_ciphers_md2.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "MD5. Security depends heavily on usage and what is secured.",
        "example": "MD5",
        "regex": "MD5",
        "output_file": "3_cryptocred_ciphers_md5.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "SHA1. Security depends heavily on usage and what is secured.",
        "example": "SHA1",
        "regex": "SHA-?1",
        "output_file": "3_cryptocred_ciphers_sha1_uppercase.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "SHA1. Security depends heavily on usage and what is secured.",
        "example": "sha1",
        "regex": "sha-?1",
        "output_file": "3_cryptocred_ciphers_sha1_lowercase.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "SHA256. Security depends heavily on usage and what is secured.",
        "example": "SHA256",
        "regex": "SHA-?256",
        "output_file": "3_cryptocred_ciphers_sha256.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "SHA256. Security depends heavily on usage and what is secured.",
        "example": "SHA512",
        "regex": "SHA-?512",
        "output_file": "3_cryptocred_ciphers_sha512.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "PBKDF2. Security depends heavily on usage and what is secured.",
        "example": "PBKDF2",
        "regex": "PBKDF2",
        "output_file": "3_cryptocred_ciphers_PBKDF2.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "HMAC. Security depends heavily on usage and what is secured.",
        "example": "HMAC",
        "regex": "HMAC",
        "output_file": "3_cryptocred_ciphers_hmac.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "NTLM. Security depends heavily on usage and what is secured.",
        "example": "NTLM",
        "regex": "NTLM",
        "output_file": "3_cryptocred_ciphers_ntlm.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Kerberos. Security depends heavily on usage and what is secured.",
        "example": "Kerberos",
        "regex": "kerberos",
        "output_file": "3_cryptocred_ciphers_kerberos.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Password and variants of it",
        "example": "pass-word or passwd",
        "regex": "pass.?wo?r?d",
        "output_file": "3_cryptocred_password.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Encoded password and variants of it",
        "example": "encoded pw = 0x1234",
        "regex": "encoded.?pw",
        "output_file": "3_cryptocred_encoded_pw.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "SSL usage with requireSSL",
        "example": "requireSSL",
        "regex": "require.{0,$WILDCARD_SHORT}SSL",
        "output_file": "3_cryptocred_ssl_usage_require-ssl.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "SSL usage with useSSL",
        "example": "use ssl",
        "regex": "use.{0,$WILDCARD_SHORT}SSL",
        "output_file": "3_cryptocred_ssl_usage_use-ssl.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "TLS usage with require TLS",
        "example": "require TLS",
        "regex": "require.{0,$WILDCARD_SHORT}TLS",
        "output_file": "3_cryptocred_tls_usage_require-tls.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "TLS usage with use TLS",
        "example": "use TLS",
        "regex": "use.{0,$WILDCARD_SHORT}TLS",
        "output_file": "3_cryptocred_tls_usage_use-tls.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Wide search for certificate and keys specifics of base64 encoded format",
        "example": "begin certificate",
        "regex": "BEGIN.{0,$WILDCARD_SHORT}CERTIFICATE",
        "output_file": "4_cryptocred_certificates_and_keys_wide_begin-certificate.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Wide search for certificate and keys specifics of base64 encoded format",
        "example": "private key",
        "regex": "PRIVATE.{0,$WILDCARD_SHORT}KEY",
        "output_file": "4_cryptocred_certificates_and_keys_wide_private-key.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Wide search for certificate and keys specifics of base64 encoded format",
        "example": "public key",
        "regex": "PUBLIC.{0,$WILDCARD_SHORT}KEY",
        "output_file": "4_cryptocred_certificates_and_keys_wide_public-key.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "PW abbrevation for password",
        "example": "PW=1234",
        "regex": "PW.?=",
        "output_file": "4_cryptocred_pw_capitalcase.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "PWD abbrevation for password",
        "example": "PWD",
        "regex": "PWD",
        "output_file": "4_cryptocred_pwd_uppercase.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "pwd abbrevation for password",
        "example": "pwd",
        "regex": "pwd",
        "output_file": "4_cryptocred_pwd_lowercase.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Pwd abbrevation for password",
        "example": "Pwd",
        "regex": "Pwd",
        "output_file": "4_cryptocred_pwd_capitalcase.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Credentials. Included everything 'creden' because some programers write credencials instead of credentials and such things.",
        "example": "credentials",
        "regex": "creden",
        "output_file": "4_cryptocred_credentials_wide.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Passcode and variants of it",
        "example": "passcode = \"123\"",
        "regex": "pass.?code",
        "output_file": "4_cryptocred_passcode_wide.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Passphrase and variants of it",
        "example": "passphrase",
        "regex": "pass.?phrase",
        "output_file": "4_cryptocred_passphrase_wide.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Secret and variants of it",
        "example": "secret",
        "regex": "se?3?cre?3?t",
        "output_file": "4_cryptocred_secret_wide.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "PIN code and variants of it",
        "example": "pin code",
        "regex": "pin.?code",
        "output_file": "4_cryptocred_pin_code_wide.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Proxy-Authorization",
        "example": "ProxyAuthorisation",
        "regex": "Proxy.?Authoris?z?ation",
        "output_file": "4_cryptocred_proxy-authorization.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Authorization",
        "example": "Authorisation",
        "regex": "Authori[sz]ation",
        "output_file": "4_cryptocred_authorization.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Authentication",
        "example": "Authentication",
        "regex": "Authentication",
        "output_file": "4_cryptocred_authentication.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Hash",
        "example": "hash_value",
        "regex": "hash(?!(table|map|set|code))",
        "output_file": "5_cryptocred_hash.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Salt for a hashing algorithm?",
        "example": "Salt or salt",
        "regex": "[Ss]alt",
        "output_file": "5_cryptocred_salt1.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Salt for a hashing algorithm?",
        "example": "SALT",
        "regex": "SALT",
        "output_file": "5_cryptocred_salt2.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Hexdigest",
        "example": "hex-digest",
        "regex": "hex.?digest",
        "output_file": "5_cryptocred_hexdigest.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "SQL injection found in a web application the wild: Using string.Format instead of SqlParameter leading to non-prepared SQL statement which is later executed",
        "example": "string.Format(\"SELECT * FROM [a].[b] ab ORDER BY {0} {1} OFFSET {2} ROWS FETCH NEXT {3} ROWS ONLY;\", new object[4]{(object) x, (object) y, (object) z, (object) u});",
        "regex": "string\\.Format\\(.{0,$WILDCARD_SHORT}SELECT.{0,$WILDCARD_LONG}FROM",
        "output_file": "1_dotnet_stringformat_sqli.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Potentially dangerous request filter message is not poping up when disabled, which means XSS in a lot of cases.",
        "example": "ValidateRequest",
        "regex": "ValidateRequest",
        "output_file": "2_dotnet_validate_request.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "If you declare a variable 'unsafe' in .NET you can do pointer arythmetic and therefore introduce buffer overflows etc. again",
        "example": "int unsafe bla",
        "regex": "unsafe\\s",
        "output_file": "2_dotnet_unsafe_declaration.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "If you use Marshal in .NET you use an unsafe API and therefore you could introduce buffer overflows etc. again.",
        "example": "Marshal",
        "regex": "Marshal",
        "output_file": "2_dotnet_marshal.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "If you use 'LayoutKind.Explicit' in .NET you can get memory corruption again, see http://weblog.ikvm.net/2008/09/13/WritingANETSecurityExploitPoC.aspx for an example",
        "example": "[StructLayout(LayoutKind.Explicit)]",
        "regex": "LayoutKind\\.Explicit",
        "output_file": "2_dotnet_LayoutKind_explicit.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "SuppressUnmanagedCodeSecurityAttribute, see https://msdn.microsoft.com/en-us/library/ms182311(v=vs.80).aspx",
        "example": "[SuppressUnmanagedCodeSecurityAttribute()]",
        "regex": "SuppressUnmanagedCodeSecurityAttribute",
        "output_file": "2_dotnet_SuppressUnmanagedCodeSecurityAttribute.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": ".NET View state enable",
        "example": "EnableViewState",
        "regex": "EnableViewState",
        "output_file": "3_dotnet_viewState.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Console.WriteLine should not be used as it is only for debugging purposes, see https://sonarqube.com/coding_rules#types=VULNERABILITY|languages=cs",
        "example": "Console.WriteLine(\"debug with sensitive information\")",
        "regex": "Console\\.WriteLine",
        "output_file": "3_dotnet_console_WriteLine.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "TripleDESCryptoServiceProvider, see https://sonarqube.com/coding_rules#types=VULNERABILITY|languages=cs",
        "example": "new TripleDESCryptoServiceProvider();",
        "regex": "TripleDESCryptoServiceProvider",
        "output_file": "3_dotnet_TripleDESCryptoServiceProvider.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "unchecked allows to disable exceptions for integer overflows, see https://sonarqube.com/coding_rules#types=VULNERABILITY|languages=cs",
        "example": "int d = unchecked(list.Sum()); or also as a block unchecked { int e = list.Sum(); }",
        "regex": "unchecked",
        "output_file": "3_dotnet_unchecked.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Code access security permission changing via reflection, also one of the rules of https://www.owasp.org/index.php/Category:OWASP_Code_Crawler",
        "example": "ReflectionPermission.MemberAccess",
        "regex": "ReflectionPermission",
        "output_file": "3_dotnet_ReflectionPermission.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Hidden input fields for HTML, also one of the rules of https://www.owasp.org/index.php/Category:OWASP_Code_Crawler",
        "example": "system.web.ui.htmlcontrols.htmlinputhidden",
        "regex": "htmlinputhidden",
        "output_file": "3_dotnet_htmlinputhidden.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Configuration for request encoding, also one of the rules of https://www.owasp.org/index.php/Category:OWASP_Code_Crawler",
        "example": "requestEncoding",
        "regex": "requestEncoding",
        "output_file": "3_dotnet_requestEncoding.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Configuration for custom errors, also one of the rules of https://www.owasp.org/index.php/Category:OWASP_Code_Crawler",
        "example": "CustomErrors",
        "regex": "CustomErrors",
        "output_file": "3_dotnet_CustomErrors.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Used for IO in .NET, also one of the rules of https://www.owasp.org/index.php/Category:OWASP_Code_Crawler",
        "example": "pipedinputstream",
        "regex": "pipedinputstream",
        "output_file": "3_dotnet_pipedinputstream.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Used for IO in .NET, also one of the rules of https://www.owasp.org/index.php/Category:OWASP_Code_Crawler",
        "example": "objectstream",
        "regex": "objectstream",
        "output_file": "3_dotnet_objectstream.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Authentication as specified on https://msdn.microsoft.com/en-us/library/aa289844(v=vs.71).aspx , also one of the rules of https://www.owasp.org/index.php/Category:OWASP_Code_Crawler",
        "example": "Application_OnAuthenticateRequest",
        "regex": "AuthenticateRequest",
        "output_file": "3_dotnet_AuthenticateRequest.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Authorization as specified on https://msdn.microsoft.com/en-us/library/system.web.httpapplication.authorizerequest(v=vs.110).aspx , also one of the rules of https://www.owasp.org/index.php/Category:OWASP_Code_Crawler",
        "example": "AuthorizeRequest",
        "regex": "AuthorizeRequest",
        "output_file": "3_dotnet_AuthorizeRequest.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Session_OnStart as specified on https://msdn.microsoft.com/en-us/library/ms524776(v=vs.90).aspx , also one of the rules of https://www.owasp.org/index.php/Category:OWASP_Code_Crawler",
        "example": "Session_OnStart",
        "regex": "Session_OnStart",
        "output_file": "3_dotnet_Session_OnStart.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "SecurityCriticalAttribute as specified on https://msdn.microsoft.com/en-us/library/system.security.securitycriticalattribute.aspx",
        "example": "SecurityCriticalAttribute",
        "regex": "SecurityCriticalAttribute",
        "output_file": "3_dotnet_SecurityCriticalAttribute.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "SecurityPermission as specified on https://msdn.microsoft.com/en-us/library/system.security.permissions.securitypermission(v=vs.110).aspx",
        "example": "SecurityPermission",
        "regex": "SecurityPermission",
        "output_file": "3_dotnet_SecurityPermission.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "SecurityAction as specified on https://msdn.microsoft.com/en-us/library/ms182303(v=vs.80).aspx",
        "example": "[EnvironmentPermissionAttribute(SecurityAction.LinkDemand, Unrestricted=true)]",
        "regex": "SecurityAction",
        "output_file": "3_dotnet_SecurityAction.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Unmanaged memory pointers with IntPtr/UIntPtr, see https://msdn.microsoft.com/en-us/library/ms182306(v=vs.80).aspx",
        "example": "public IntPtr publicPointer1;",
        "regex": "IntPtr",
        "output_file": "3_dotnet_IntPtr.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "SQLClient, see https://msdn.microsoft.com/en-us/library/ms182310(v=vs.80).aspx",
        "example": "using System.Data.SqlClient;",
        "regex": "SqlClient",
        "output_file": "3_dotnet_SqlClient.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "UnmanagedCode, see https://msdn.microsoft.com/en-us/library/ms182312(v=vs.80).aspx",
        "example": "[SecurityPermissionAttribute(SecurityAction.Demand, UnmanagedCode=true)]",
        "regex": "UnmanagedCode",
        "output_file": "3_dotnet_UnmanagedCode.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Serializable, see https://msdn.microsoft.com/en-us/library/ms182315(v=vs.80).aspx",
        "example": "[Serializable]",
        "regex": "Serializable",
        "output_file": "3_dotnet_Serializable.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "CharSet.Auto, see https://msdn.microsoft.com/en-us/library/ms182319(v=vs.80).aspx",
        "example": "[DllImport(\"advapi32.dll\", CharSet=CharSet.Auto)]",
        "regex": "CharSet\\.Auto",
        "output_file": "3_dotnet_CharSet_Auto.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "DllImport, interesting to see in general, additionally see https://msdn.microsoft.com/en-us/library/ms182319(v=vs.80).aspx",
        "example": "[DllImport(\"advapi32.dll\", CharSet=CharSet.Auto)]",
        "regex": "DllImport",
        "output_file": "3_dotnet_DllImport.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Used for IO in .NET, also one of the rules of https://www.owasp.org/index.php/Category:OWASP_Code_Crawler",
        "example": "ObjectInputStream",
        "regex": "ObjectInputStream",
        "output_file": "4_dotnet_ObjectInputStream.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "URIs with authentication information specified as ://username:password@example.org",
        "example": "http://username:password@example.com",
        "regex": "://[^ ]{1,$WILDCARD_SHORT}:[^ ]{1,$WILDCARD_SHORT}@",
        "output_file": "1_general_uris_auth_info_narrow.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Generic database connection string for various databases. See https://www.connectionstrings.com/sql-server/ for different connection strings.",
        "example": "Data Source=myServerAddress;Initial Catalog=myDataBase;Integrated Security=SSPI;User ID=myDomain\\myUsername;Password=myPassword;",
        "regex": ";Password=",
        "output_file": "1_general_con_str_sql_password.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Generic database connection string for various databases. See https://www.connectionstrings.com/sql-server/ for different connection strings.",
        "example": "Driver={Oracle in OraHome92};Dbq=myTNSServiceName;Uid=myUsername;Pwd=myPassword;",
        "regex": ";Pwd=",
        "output_file": "1_general_con_str_sql_pwd.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "A generic templating pattern that is used in HTML generation of Java (JSP), Ruby and client-side JavaScript libraries.",
        "example": "In Java <%=bean.getName()%> or in ruby <%= parameter[:value] %>",
        "regex": "<%=",
        "output_file": "2_general_html_templating.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Superuser. Sometimes the root user of *nix is referenced, sometimes it is about root detection on mobile phones (e.g. Android Superuser.apk app detection)",
        "example": "super_user",
        "regex": "super.?user",
        "output_file": "2_general_superuser.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Su binary",
        "example": "sudo binary",
        "regex": "su.{0,3}binary",
        "output_file": "2_general_su-binary.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "sudo",
        "example": "sudo make me a sandwich",
        "regex": "sudo\\s",
        "output_file": "2_general_sudo.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "URIs with authentication information specified as username:password@example.org",
        "example": "username:password@example.com",
        "regex": "[^ ]{1,$WILDCARD_SHORT}:[^ ]{1,$WILDCARD_SHORT}@",
        "output_file": "2_general_uris_auth_info_wide.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "jdbc URIs",
        "example": "jdbc:mysql://localhost/test?password=ABC",
        "regex": "jdbc:",
        "output_file": "2_general_jdbc_uri.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Generic database connection string for SQL server. See https://www.connectionstrings.com/sql-server/ for different connection strings.",
        "example": "Server=myServerAddress;Database=myDataBase;Trusted_Connection=True;",
        "regex": "Server=.{0,$WILDCARD_SHORT};Database=",
        "output_file": "2_general_con_str_sqlserver.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Generic database connection string for localdb and other dbs. See https://www.connectionstrings.com/sql-server/ for different connection strings.",
        "example": "Server=(localdb)\\v11.0;Integrated Security=true;AttachDbFileName=C:\\MyFolder\\MyData.mdf;",
        "regex": ";Integrated.Security=",
        "output_file": "2_general_con_str_localdb.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "SQL injection and variants of it. Sometimes refered in comments or variable names for code that should prevent it. If you find something interesting that is used for prevention in a framework, you might want to add another grep for that in this script.",
        "example": "sql-injection",
        "regex": "sql.{0,$WILDCARD_SHORT}injection",
        "output_file": "2_general_sql_injection.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "XSS. Sometimes refered in comments or variable names for code that should prevent it. If you find something interesting that is used for prevention in a framework, you might want to add another grep for that in this script.",
        "example": "XSS",
        "regex": "XSS",
        "output_file": "2_general_xss_uppercase.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "XSS. Sometimes refered in comments or variable names for code that should prevent it. If you find something interesting that is used for prevention in a framework, you might want to add another grep for that in this script.",
        "example": "Xss",
        "regex": "Xss",
        "output_file": "2_general_xss_regularcase.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "XSS. Sometimes refered in comments or variable names for code that should prevent it. If you find something interesting that is used for prevention in a framework, you might want to add another grep for that in this script.",
        "example": "xss",
        "regex": "xss",
        "output_file": "2_general_xss_lowercase.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Clickjacking and variants of it. Sometimes refered in comments or variable names for code that should prevent it. If you find something interesting that is used for prevention in a framework, you might want to add another grep for that in this script.",
        "example": "click-jacking",
        "regex": "click.{0,$WILDCARD_SHORT}jacking",
        "output_file": "2_general_hacking_techniques_clickjacking.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "XSRF/CSRF and variants of it. Sometimes refered in comments or variable names for code that should prevent it. If you find something interesting that is used for prevention in a framework, you might want to add another grep for that in this script.",
        "example": "xsrf",
        "regex": "xsrf",
        "output_file": "2_general_hacking_techniques_xsrf.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "XSRF/CSRF and variants of it. Sometimes refered in comments or variable names for code that should prevent it. If you find something interesting that is used for prevention in a framework, you might want to add another grep for that in this script.",
        "example": "csrf",
        "regex": "csrf",
        "output_file": "2_general_hacking_techniques_csrf.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Buffer overflow and variants of it. Sometimes refered in comments or variable names for code that should prevent it. If you find something interesting that is used for prevention in a framework, you might want to add another grep for that in this script.",
        "example": "buffer-overflow",
        "regex": "buffer.{0,$WILDCARD_SHORT}overflow",
        "output_file": "2_general_hacking_techniques_buffer-overflow.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Integer overflow and variants of it. Sometimes refered in comments or variable names for code that should prevent it. If you find something interesting that is used for prevention in a framework, you might want to add another grep for that in this script.",
        "example": "integer-overflow",
        "regex": "integer.{0,$WILDCARD_SHORT}overflow",
        "output_file": "2_general_hacking_techniques_integer-overflow.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Obfuscation and variants of it. Might be interesting code where the obfuscation is done. If you find something interesting that is used for obfuscation in a framework, you might want to add another grep for that in this script.",
        "example": "obfuscation",
        "regex": "obfuscat",
        "output_file": "2_general_obfuscation.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "SQL CREATE LOGIN statement",
        "example": "CREATE LOGIN loginName",
        "regex": "CREATE LOGIN",
        "output_file": "2_general_sql_create_login.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "SQL PWDCOMPARE statement",
        "example": "SELECT PWDCOMPARE(\"pass\", CAST(LOGINPROPERTY(\"username\", \"passwordshash\")))....",
        "regex": "PWDCOMPARE\\(",
        "output_file": "2_general_sql_pwdcompare.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "SQL LOGINPROPERTY statement",
        "example": "SELECT LOGINPROPERTY(\"username\", \"passwordshash\");",
        "regex": "LOGINPROPERTY\\(",
        "output_file": "2_general_sql_loginproperty.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "MSSQL sp_addlogin statement",
        "example": "EXEC sp_addlogin @loginame = \"username\", @passwd = 0x00000000000000000000000000000,@defdb = \"DBNAME\",@encryptopt = \"skip_encryption\";",
        "regex": "sp_addlogin",
        "output_file": "2_general_sql_sp_addlogin.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "MSSQL WITH PASSWORD statement",
        "example": "CREATE LOGIN [USERNAME] WITH PASSWORD = 0x000000000000000000000 HASHED, SID =",
        "regex": "WITH PASSWORD =",
        "output_file": "2_general_sql_with_password.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "MSSQL rmtpassword attribute",
        "example": "EXEC master.dbo.sp_addlinkedsrvlogin @rmtsrvname = N\"Instance\",@useself = N\"False\",@locallogin = NULL,@rmtuser = N\"USERNAME\",@rmtpassword = \"pass\";",
        "regex": "@rmtpassword",
        "output_file": "2_general_sql_rmtpassword.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Exec mostly means executing on OS.",
        "example": "runTime.exec(\"echo \"+unsanitized_input);",
        "regex": "exec\\s{0,$WILDCARD_SHORT}\\(",
        "output_file": "3_general_exec_narrow.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Eval mostly means evaluating commands.",
        "example": "eval (",
        "regex": "eval\\s{0,$WILDCARD_SHORT}\\(",
        "output_file": "3_general_eval_narrow.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Syscall: Command execution?",
        "example": "syscall(",
        "regex": "sys.?call\\s{0,$WILDCARD_SHORT}\\(",
        "output_file": "3_general_syscall_narrow.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "system: Command execution?",
        "example": "system(",
        "regex": "system\\s{0,$WILDCARD_SHORT}\\(",
        "output_file": "3_general_system_narrow.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "pipeline: Command execution?",
        "example": "pipeline(",
        "regex": "pipeline\\s{0,$WILDCARD_SHORT}\\(",
        "output_file": "3_general_pipeline_narrow.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "popen: Command execution?",
        "example": "popen(",
        "regex": "popen\\s{0,$WILDCARD_SHORT}\\(",
        "output_file": "3_general_popen_narrow.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "spawn: Command execution?",
        "example": "spawn(",
        "regex": "spawn\\s{0,$WILDCARD_SHORT}\\(",
        "output_file": "3_general_spawn_narrow.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Session timeouts should be reasonable short for things like sessions for web logins but can also lead to denial of service conditions in other cases.",
        "example": "session-timeout",
        "regex": "session-?\\s?time-?\\s?out",
        "output_file": "3_general_session_timeout.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "General setcookie command used in HTTP, important to see HTTPonly/secure flags, path setting, etc.",
        "example": "setcookie",
        "regex": "setcookie",
        "output_file": "3_general_setcookie.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "General serialisation code, can lead to command execution",
        "example": "serialise",
        "regex": "seriali[sz]e",
        "output_file": "3_general_serialise.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Search for the word credit card",
        "example": "credit-card",
        "regex": "credit.?card",
        "output_file": "3_general_creditcard.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Non-SSL URIs ftp",
        "example": "ftp://example.com",
        "regex": "ftp://",
        "output_file": "3_general_non_ssl_uris_ftp.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Non-SSL URIs socket",
        "example": "socket://192.168.0.1:3000",
        "regex": "socket://",
        "output_file": "3_general_non_ssl_uris_socket.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Non-SSL URIs imap",
        "example": "imap://example.com",
        "regex": "imap://",
        "output_file": "3_general_non_ssl_uris_imap.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "file URIs",
        "example": "file://c/example.txt",
        "regex": "file://",
        "output_file": "3_general_non_ssl_uris_file.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Generic database connection string for SQL server meaning AD auth is used. See https://www.connectionstrings.com/sql-server/ for different connection strings.",
        "example": "Server=myServerAddress;Database=myDataBase;Trusted_Connection=True;",
        "regex": ";Trusted_Connection=",
        "output_file": "3_general_con_str_trusted_sqlserver.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Scheme. Is the first part of a URI aka 'the protocol'.",
        "example": "RouteUrlWithScheme",
        "regex": "scheme",
        "output_file": "3_general_scheme.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Schema. Eg. a database schema.",
        "example": "database schema",
        "regex": "schema",
        "output_file": "3_general_schema.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "WSDL defines web services",
        "example": "example.wsdl",
        "regex": "wsdl",
        "output_file": "3_general_wsdl.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "WebView, often used to display HTML content inside native apps",
        "example": "webview",
        "regex": "webview",
        "output_file": "3_general_webview.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Directory listing, usually a bad idea in web servers.",
        "example": "directory-listing",
        "regex": "directory.{0,$WILDCARD_SHORT}listing",
        "output_file": "3_general_directory_listing.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Everything between backticks, because in Perl and Shell scirpting (eg. cgi-scripts) these are system execs.",
        "example": "`basename file-var`",
        "regex": "\\`.{2,$WILDCARD_LONG}\\`",
        "output_file": "3_general_backticks.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "SQL SELECT statement",
        "example": "SELECT EXAMPLE, ABC, DEF FROM TABLE",
        "regex": "SELECT\\s.{0,$WILDCARD_LONG}FROM",
        "output_file": "3_general_sql_select.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "SQL INSERT statement",
        "example": "INSERT INTO TABLE example VALUES(123);",
        "regex": "INSERT.{0,$WILDCARD_SHORT}INTO",
        "output_file": "3_general_sql_insert.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "SQL DELETE statement",
        "example": "DELETE COLUMN WHERE 1=1",
        "regex": "DELETE.{0,$WILDCARD_LONG}WHERE",
        "output_file": "3_general_sql_delete.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "sqlcipher, used to encrypt database entries transparently",
        "example": "sqlcipher",
        "regex": "sqlcipher",
        "output_file": "3_general_sql_sqlcipher.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Base64 as a word used",
        "example": "Base64",
        "regex": "base64",
        "output_file": "3_general_base64_word.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Stupid: Swear words are often used when things don't work as intended by the developer.",
        "example": "Stupid!",
        "regex": "stupid",
        "output_file": "3_general_swear_stupid.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Fuck: Swear words are often used when things don't work as intended by the developer. X-)",
        "example": "Fuck!",
        "regex": "fuck",
        "output_file": "3_general_swear_fuck.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Shit and bullshit: Swear words are often used when things don't work as intended by the developer.",
        "example": "Shit!",
        "regex": "shit",
        "output_file": "3_general_swear_shit.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Crap: Swear words are often used when things don't work as intended by the developer.",
        "example": "Crap!",
        "regex": "crap",
        "output_file": "3_general_swear_crap.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "IP addresses",
        "example": "192.168.0.1 10.0.0.1",
        "regex": "(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)",
        "output_file": "3_general_ip-addresses.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Referer is only used for the HTTP Referer usually, it can be specified by the attacker",
        "example": "referer",
        "regex": "referer",
        "output_file": "3_general_referer.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Generic search for SQL injection, FROM and WHERE being SQL keywords and + meaning string concatenation",
        "example": "q = \"SELECT * from USERS where NAME=\" + user;",
        "regex": "from\\s.{0,$WILDCARD_LONG}\\swhere\\s.{0,$WILDCARD_LONG}",
        "output_file": "3_general_sqli_generic.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "A form of query often used for LDAP, should be checked if it doesn't lead to LDAP injection and/or DoS",
        "example": "String ldap_query = \"(&(param=user)(name=\" + name_unsanitized + \"))\";",
        "regex": "\\(&\\(.{0,$WILDCARD_SHORT}=",
        "output_file": "3_general_ldap_generic.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Generic sleep call, if server side this could block thread/process and therefore enable to easily do Denial of Service attacks",
        "example": "sleep(2);",
        "regex": "sleep",
        "output_file": "3_general_sleep_generic.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Denying is often used for filtering, etc.",
        "example": "deny",
        "regex": "[Dd]eny",
        "output_file": "4_general_deny.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Exec mostly means executing on OS.",
        "example": "runTime.exec(\"echo \"+unsanitized_input);",
        "regex": "exec",
        "output_file": "4_general_exec_wide.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Eval mostly means evaluating commands.",
        "example": "eval",
        "regex": "eval",
        "output_file": "4_general_eval_wide.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Syscall: Command execution?",
        "example": "syscall",
        "regex": "sys.?call",
        "output_file": "4_general_syscall_wide.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "system: Command execution?",
        "example": "system",
        "regex": "system",
        "output_file": "4_general_system_wide.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "pipeline: Command execution?",
        "example": "pipeline",
        "regex": "pipeline",
        "output_file": "4_general_pipeline_wide.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "popen: Command execution?",
        "example": "popen",
        "regex": "popen",
        "output_file": "4_general_popen_wide.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "spawn: Command execution?",
        "example": "spawn",
        "regex": "spawn",
        "output_file": "4_general_spawn_wide.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "chgrp: Change group command",
        "example": "chgrp",
        "regex": "chgrp",
        "output_file": "4_general_chgrp.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "chown: Change owner command",
        "example": "chown",
        "regex": "chown",
        "output_file": "4_general_chown.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "chmod: Change mode (permissions) command",
        "example": "chmod",
        "regex": "chmod",
        "output_file": "4_general_chmod.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Timeout. Whatever timeout this might be, that might be interesting.",
        "example": "timeout",
        "regex": "time-?\\s?out",
        "output_file": "4_general_session_timeout.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Relative paths. May allow an attacker to put something early in the search path (if parts are user supplied input) and overwrite behavior",
        "example": "../../",
        "regex": "\\./",
        "output_file": "4_general_relative_paths.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Debugger related content. In JavaScript, the debugger statement (debugger;) is basically a breakpoint, see https://sonarqube.com/coding_rules#types=VULNERABILITY|languages=js",
        "example": "debugger",
        "regex": "debugger",
        "output_file": "4_general_debugger.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Kernel. A reference to something low level in a Kernel?",
        "example": "Kernel",
        "regex": "Kernel",
        "output_file": "4_general_kernel.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Hack. Developers sometimes hack something around security.",
        "example": "hack",
        "regex": "hack",
        "output_file": "4_general_hack.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Crack. Sounds suspicious.",
        "example": "crack",
        "regex": "crack",
        "output_file": "4_general_crack.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Trick. Sounds suspicious.",
        "example": "trick",
        "regex": "trick",
        "output_file": "4_general_trick.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Exploit and variants of it. Sounds suspicious.",
        "example": "exploit",
        "regex": "xploit",
        "output_file": "4_general_exploit.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Bypass. Sounds suspicious, what do they bypass exactly?",
        "example": "bypass",
        "regex": "bypass",
        "output_file": "4_general_bypass.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Backdoor. Sounds suspicious, why would anyone ever use this word?",
        "example": "back-door",
        "regex": "back.{0,$WILDCARD_SHORT}door",
        "output_file": "4_general_backdoor.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Backd00r. Sounds suspicious, why would anyone ever use this word?",
        "example": "back-d00r",
        "regex": "back.{0,$WILDCARD_SHORT}d00r",
        "output_file": "4_general_backd00r.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Fake. Sounds suspicious.",
        "example": "fake:",
        "regex": "fake",
        "output_file": "4_general_fake.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "All HTTPS URIs",
        "example": "https://example.com",
        "regex": "https://",
        "output_file": "4_general_https_urls.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "All HTTP URIs",
        "example": "http://example.com",
        "regex": "http://",
        "output_file": "4_general_http_urls.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Hidden things, for example hidden HTML fields",
        "example": "hidden:",
        "regex": "hidden",
        "output_file": "4_general_hidden.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "SQL SQLITE",
        "example": "sqlite",
        "regex": "sqlite",
        "output_file": "4_general_sql_sqlite.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "SQL cursor?",
        "example": "cursor",
        "regex": "cursor",
        "output_file": "4_general_sql_cursor.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Base64 encoded data (that is more than 6 bytes long). This regex won't detect a base64 encoded value over several lines and won't detect one that does not end with an equal sign...",
        "example": "YWJj YScqKyo6LV/Dpw==",
        "regex": "(?:[A-Za-z0-9+/]{4}){2,}(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)",
        "output_file": "4_general_base64_content.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Base64 URL-safe encoded data (that is more than 6 bytes long). To get from URL-safe base64 to regular base64 you need .replace('-','+').replace('_','/'). This regex won't detect a base64 encoded value over several lines and won't detect one that does not end with an equal sign...",
        "example": "YScqKyo6LV_Dpw==",
        "regex": "(?:[A-Za-z0-9_-]{4}){2,}(?:[A-Za-z0-9_-]{2}==|[A-Za-z0-9_-]{3}=)",
        "output_file": "4_general_base64_urlsafe.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Update code and general update strategy weaknesses",
        "example": "Update",
        "regex": "update",
        "output_file": "5_general_update.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Backup code and general backup strategy weaknesses",
        "example": "Backup",
        "regex": "backup",
        "output_file": "5_general_backup.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Email addresses",
        "example": "example-email_address-@example-domain.com",
        "regex": "\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}\\b",
        "output_file": "5_general_email.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "TODOs, unfinished and insecure things?",
        "example": "Todo:",
        "regex": "[Tt]odo",
        "output_file": "5_general_todo_capital_and_lower.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "TODOs, unfinished and insecure things?",
        "example": "TODO:",
        "regex": "TODO",
        "output_file": "5_general_todo_uppercase.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Workarounds, maybe they work around security?",
        "example": "workaround: ",
        "regex": "workaround",
        "output_file": "5_general_workaround.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "GPL violation? Not security related, but your customer might be happy to know such stuff",
        "example": "GNU GPL",
        "regex": "GNU\\sGPL",
        "output_file": "5_general_gpl1.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "GPL violation? Not security related, but your customer might be happy to know such stuff",
        "example": "GPLv2",
        "regex": "GPLv2",
        "output_file": "5_general_gpl2.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "GPL violation? Not security related, but your customer might be happy to know such stuff",
        "example": "GPLv3",
        "regex": "GPLv3",
        "output_file": "5_general_gpl3.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "GPL violation? Not security related, but your customer might be happy to know such stuff",
        "example": "GPL Version",
        "regex": "GPL\\sVersion",
        "output_file": "5_general_gpl4.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "GPL violation? Not security related, but your customer might be happy to know such stuff",
        "example": "General Public License",
        "regex": "General\\sPublic\\sLicense",
        "output_file": "5_general_gpl5.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "hash_hmac with user input. It throws a warning when the second parameter is an array instead of an exception, which is sometimes an issue as you can input arrays by using param[]=value.",
        "example": "hash_hmac(\"sha256\", $_POST[\"salt\"], $secret);",
        "regex": "hash_hmac\\s{0,$WILDCARD_SHORT}\\(.{0,$WILDCARD_LONG}\\\\\\$_",
        "output_file": "2_hmac_with_user_input.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "HTML upload.",
        "example": "enctype=\"multipart/form-data\"",
        "regex": "multipart/form-data",
        "output_file": "4_html_upload_form_tag.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "HTML upload form.",
        "example": "<input name=\"param\" type=\"file\"",
        "regex": "type=.?file",
        "output_file": "4_html_upload_input_tag.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Autocomplete should be set to off for password fields.",
        "example": "autocomplete",
        "regex": "autocomplete",
        "output_file": "6_html_autocomplete.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "kCFStreamSSLAllowsExpiredCertificates",
        "example": "kCFStreamSSLAllowsExpiredCertificates",
        "regex": "kCFStreamSSLAllowsExpiredCertificates",
        "output_file": "2_ios_kCFStreamSSLAllowsExpiredCertificates.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "kCFStreamSSLAllowsExpiredRoots",
        "example": "kCFStreamSSLAllowsExpiredRoots",
        "regex": "kCFStreamSSLAllowsExpiredRoots",
        "output_file": "2_ios_kCFStreamSSLAllowsExpiredRoots.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "kCFStreamSSLAllowsAnyRoot",
        "example": "kCFStreamSSLAllowsAnyRoot",
        "regex": "kCFStreamSSLAllowsAnyRoot",
        "output_file": "2_ios_kCFStreamSSLAllowsAnyRoot.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "kCFStreamSSLValidatesCertificateChain",
        "example": "kCFStreamSSLValidatesCertificateChain",
        "regex": "kCFStreamSSLValidatesCertificateChain",
        "output_file": "2_ios_kCFStreamSSLValidatesCertificateChain.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "kSecTrustOptionAllowExpired",
        "example": "kSecTrustOptionAllowExpired",
        "regex": "kSecTrustOptionAllowExpired",
        "output_file": "2_ios_kSecTrustOptionAllowExpired.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "kSecTrustOptionAllowExpiredRoot",
        "example": "kSecTrustOptionAllowExpiredRoot",
        "regex": "kSecTrustOptionAllowExpiredRoot",
        "output_file": "2_ios_kSecTrustOptionAllowExpiredRoot.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "NSAllowsArbitraryLoads set to 1 allows iOS applications to load resources over insecure non-TLS protocols and is specified in the Info.plist file. It doesn't mean the application is really doing it, however, it is recommended to disable non-TLS connections.",
        "example": "NSAllowsArbitraryLoads",
        "regex": "NSAllowsArbitraryLoads",
        "output_file": "2_ios_NSAllowsArbitraryLoads.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Check for SQL injection. See also https://github.com/felixgr/secure-ios-app-dev",
        "example": "sqlite3_exec()",
        "regex": "sqlite3_exec\\(",
        "output_file": "2_ios_sqlite3_exec.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "libsqlite3.dylib in iOS supports fts3_tokenizer function, which has two security issues by design. See also https://github.com/felixgr/secure-ios-app-dev",
        "example": "fts3_tokenizer",
        "regex": "fts3_tokenizer",
        "output_file": "2_ios_fts3_tokenizer.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "allowLocalhostRequest, see also https://github.com/felixgr/secure-ios-app-dev",
        "example": "allowLocalhostRequest",
        "regex": "allowLocalhostRequest",
        "output_file": "2_ios_allowLocalhostRequest.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "GTM_ALLOW_INSECURE_REQUESTS, see also https://github.com/felixgr/secure-ios-app-dev",
        "example": "GTM_ALLOW_INSECURE_REQUESTS",
        "regex": "GTM_ALLOW_INSECURE_REQUESTS",
        "output_file": "2_ios_GTM_ALLOW_INSECURE_REQUESTS.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "registerForRemoteNotificationTypes, see also https://github.com/felixgr/secure-ios-app-dev",
        "example": "registerForRemoteNotificationTypes",
        "regex": "registerForRemoteNotificationTypes",
        "output_file": "2_ios_registerForRemoteNotificationTypes.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Format string vulnerable CFStringCreateWithFormat method, see also https://github.com/felixgr/secure-ios-app-dev",
        "example": "CFStringCreateWithFormat",
        "regex": "CFStringCreateWithFormat",
        "output_file": "2_ios_CFStringCreateWithFormat.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS loadHTMLString method of UIWebView in iOS",
        "example": "loadHTMLString",
        "regex": "loadHTMLString",
        "output_file": "3_ios_loadHTMLString.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS stringByEvaluatingJavaScriptFromString method of UIWebView in iOS",
        "example": "stringByEvaluatingJavaScriptFromString",
        "regex": "stringByEvaluatingJavaScriptFromString",
        "output_file": "3_ios_stringByEvaluatingJavaScriptFromString.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS canAuthenticateAgainstProtectionSpace to authenticate to a server",
        "example": "canAuthenticateAgainstProtectionSpace",
        "regex": "canAuthenticateAgainstProtectionSpace",
        "output_file": "3_ios_canAuthenticateAgainstProtectionSpace.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS didReceiveAuthenticationChallenge",
        "example": "didReceiveAuthenticationChallenge",
        "regex": "didReceiveAuthenticationChallenge",
        "output_file": "3_ios_didReceiveAuthenticationChallenge.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS willSendRequestForAuthenticationChallenge",
        "example": "willSendRequestForAuthenticationChallenge",
        "regex": "willSendRequestForAuthenticationChallenge",
        "output_file": "3_ios_willSendRequestForAuthenticationChallenge.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS continueWithoutCredentialForAuthenticationChallenge",
        "example": "continueWithoutCredentialForAuthenticationChallenge",
        "regex": "continueWithoutCredentialForAuthenticationChallenge",
        "output_file": "3_ios_continueWithoutCredentialForAuthenticationChallenge.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS ValidatesSecureCertificate",
        "example": "ValidatesSecureCertificate",
        "regex": "ValidatesSecureCertificate",
        "output_file": "3_ios_ValidatesSecureCertificate.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS setValidatesSecureCertificate",
        "example": "setValidatesSecureCertificate",
        "regex": "setValidatesSecureCertificate",
        "output_file": "3_ios_setValidatesSecureCertificate.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS setAllowsAnyHTTPSCertificate is a private API and will therefore be rejected when submitted to the Apple Store, nevertheless interesting to see if it is present",
        "example": "setAllowsAnyHTTPSCertificate",
        "regex": "setAllowsAnyHTTPSCertificate",
        "output_file": "3_ios_setAllowsAnyHTTPSCertificate.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS NSHTTPCookieAcceptPolicy method of UIWebView in iOS, NSHTTPCookieAcceptPolicyNever or NSHTTPCookieAcceptPolicyOnlyFromMainDocumentDomain",
        "example": "NSHTTPCookieAcceptPolicy",
        "regex": "NSHTTPCookieAcceptPolicy",
        "output_file": "3_ios_NSHTTPCookieAcceptPolicy.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS File protection APIs, NSFileProtectionKey, NSFileProtectionNone, NSFileProtectionComplete, NSFileProtectionCompleteUnlessOpen, NSFileProtectionCompleteUntilFirstUserAuthentication.",
        "example": "NSFileProtection",
        "regex": "NSFileProtection",
        "output_file": "3_ios_file_access_nsfileprotection.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS Keychain kSecAttrAccessibleWhenUnlocked should be kSecAttrAccessibleWhenUnlockedThisDeviceOnly to make sure they are not backuped, see https://developer.apple.com/documentation/security/ksecattraccessiblewhenunlocked",
        "example": "kSecAttrAccessibleWhenUnlocked and something afterwards",
        "regex": "kSecAttrAccessibleWhenUnlocked[^T]",
        "output_file": "3_ios_keychain_kSecAttrAccessibleWhenUnlocked.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS Keychain kSecAttrAccessibleAfterFirstUnlock should be kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly to make sure they are not backuped, see https://developer.apple.com/documentation/security/ksecattraccessiblewhenunlocked",
        "example": "kSecAttrAccessibleAfterFirstUnlock and something afterwards",
        "regex": "kSecAttrAccessibleAfterFirstUnlock[^T]",
        "output_file": "3_ios_keychain_kSecAttrAccessibleAfterFirstUnlock.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS Keychain kSecAttrAccessibleWhenPasscodeSet should be kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly to make sure they are not backuped, see https://developer.apple.com/documentation/security/ksecattraccessiblewhenunlocked",
        "example": "kSecAttrAccessibleWhenPasscodeSet and something afterwards",
        "regex": "kSecAttrAccessibleWhenPasscodeSet[^T]",
        "output_file": "3_ios_keychain_kSecAttrAccessibleWhenPasscodeSet.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS Keychain kSecAttrAccessibleAlways should be kSecAttrAccessibleAlwaysThisDeviceOnly to make sure they are not backuped, see https://developer.apple.com/documentation/security/ksecattraccessiblewhenunlocked",
        "example": "kSecAttrAccessibleAlways and something afterwards",
        "regex": "kSecAttrAccessibleAlways[^T]",
        "output_file": "3_ios_keychain_kSecAttrAccessibleAlways.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS Keychain kSecAttrSynchronizable should be false, see https://github.com/felixgr/secure-ios-app-dev",
        "example": "kSecAttrSynchronizable",
        "regex": "kSecAttrSynchronizable",
        "output_file": "3_ios_keychain_kSecAttrSynchronizable.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "kCFStreamPropertySSLSettings",
        "example": "kCFStreamPropertySSLSettings",
        "regex": "kCFStreamPropertySSLSettings",
        "output_file": "3_ios_kCFStreamPropertySSLSettings.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "kCFStreamSSLPeerName",
        "example": "kCFStreamSSLPeerName",
        "regex": "kCFStreamSSLPeerName",
        "output_file": "3_ios_kCFStreamSSLPeerName.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "kSecTrustOptionImplicitAnchors",
        "example": "kSecTrustOptionImplicitAnchors",
        "regex": "kSecTrustOptionImplicitAnchors",
        "output_file": "3_ios_kSecTrustOptionImplicitAnchors.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "NSStreamSocketSecurityLevel",
        "example": "NSStreamSocketSecurityLevel",
        "regex": "NSStreamSocketSecurityLevel",
        "output_file": "3_ios_NSStreamSocketSecurityLevel.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "sourceApplication is a parameter used in the application method used for custom URL handling and receiving data from another app, see https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623073-application . See also https://developer.apple.com/library/content/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/Inter-AppCommunication/Inter-AppCommunication.html .",
        "example": "sourceApplication:",
        "regex": "sourceApplication:",
        "output_file": "3_ios_sourceApplication.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "SecRandomCopyBytes cryptographic secure random number, see also https://github.com/felixgr/secure-ios-app-dev",
        "example": "int r = SecRandomCopyBytes(kSecRandomDefault, sizeof(int), (uint8_t*) &res);",
        "regex": "SecRandomCopyBytes",
        "output_file": "3_ios_SecRandomCopyBytes.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "allowScreenShot, see also https://github.com/felixgr/secure-ios-app-dev",
        "example": "allowScreenShot",
        "regex": "allowScreenShot",
        "output_file": "3_ios_allowScreenShot.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "UIPasteboardNameGeneral, see also https://github.com/felixgr/secure-ios-app-dev",
        "example": "UIPasteboardNameGeneral",
        "regex": "UIPasteboardNameGeneral",
        "output_file": "3_ios_UIPasteboardNameGeneral.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "secureTextEntry, see also https://github.com/felixgr/secure-ios-app-dev",
        "example": "secureTextEntry",
        "regex": "secureTextEntry",
        "output_file": "3_ios_secureTextEntry.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "allowedInsecureSchemes, see also https://github.com/felixgr/secure-ios-app-dev",
        "example": "allowedInsecureSchemes",
        "regex": "allowedInsecureSchemes",
        "output_file": "3_ios_allowedInsecureSchemes.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Format string vulnerable syslog method, see also https://github.com/felixgr/secure-ios-app-dev",
        "example": "syslog(",
        "regex": "syslog\\(",
        "output_file": "3_ios_syslog.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "UnsafePointer for Swift methods, see also https://github.com/felixgr/secure-ios-app-dev",
        "example": "UnsafePointer",
        "regex": "UnsafePointer",
        "output_file": "3_ios_UnsafePointer.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "UnsafeMutablePointer for Swift methods, see also https://github.com/felixgr/secure-ios-app-dev",
        "example": "UnsafeMutablePointer",
        "regex": "UnsafeMutablePointer",
        "output_file": "3_ios_UnsafeMutablePointer.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "UnsafeCollection for Swift methods, see also https://github.com/felixgr/secure-ios-app-dev",
        "example": "UnsafeCollection",
        "regex": "UnsafeCollection",
        "output_file": "3_ios_UnsafeCollection.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS fileURLWithPath opens a file, eg. for writing. Make sure attributes such as NSURLIsExcludedFromBackupKey described on https://developer.apple.com/library/content/qa/qa1719/_index.html are correctly set.",
        "example": "fileURLWithPath",
        "regex": "fileURLWithPath",
        "output_file": "4_ios_file_access_fileURLWithPath.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS NSURL opens a URL for example a local file, eg. for writing. Make sure attributes such as NSURLIsExcludedFromBackupKey described on https://developer.apple.com/library/content/qa/qa1719/_index.html are correctly set.",
        "example": "NSURL",
        "regex": "NSURL",
        "output_file": "4_ios_file_access_NSURL.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS NSURLConnection.",
        "example": "NSURLConnection",
        "regex": "NSURLConnection",
        "output_file": "4_ios_file_access_NSURLConnection.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS writeToFile",
        "example": "writeToFile",
        "regex": "writeToFile",
        "output_file": "4_ios_file_access_writeToFile.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS loadRequest method of UIWebView in iOS",
        "example": "loadRequest",
        "regex": "loadRequest",
        "output_file": "4_ios_loadRequest.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS File protection APIs",
        "example": "NSFileManager",
        "regex": "NSFileManager",
        "output_file": "4_ios_file_access_nsfilemanager.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS File protection APIs",
        "example": "NSPersistantStoreCoordinator",
        "regex": "NSPersistantStoreCoordinator",
        "output_file": "4_ios_file_access_nspersistantstorecoordinator.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS Keychain stuff, general match",
        "example": "kSecAttrAccessible",
        "regex": "kSecAttrAccessible",
        "output_file": "4_ios_keychain_ksecattraccessible.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS Keychain stuff",
        "example": "SecItemAdd",
        "regex": "SecItemAdd",
        "output_file": "4_ios_keychain_secitemadd.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS Keychain stuff",
        "example": "SecItemUpdate",
        "regex": "SecItemUpdate",
        "output_file": "4_ios_keychain_SecItemUpdate.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS Keychain stuff",
        "example": "SecItemCopyMatching",
        "regex": "SecItemCopyMatching",
        "output_file": "4_ios_keychain_SecItemCopyMatching.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS Keychain stuff",
        "example": "KeychainItemWrapper",
        "regex": "KeychainItemWrapper",
        "output_file": "4_ios_keychain_KeychainItemWrapper.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "NSCachedURLResponse willCacheResponse",
        "example": "willCacheResponse",
        "regex": "willCacheResponse",
        "output_file": "4_ios_willCacheResponse.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "CFFTPStream",
        "example": "CFFTPStream",
        "regex": "CFFTPStream",
        "output_file": "4_ios_CFFTPStream.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "NSStreamin",
        "example": "NSStreamin",
        "regex": "NSStreamin",
        "output_file": "4_ios_NSStreamin.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "NSXMLParser",
        "example": "NSXMLParser",
        "regex": "NSXMLParser",
        "output_file": "4_ios_NSXMLParser.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "UIPasteboardNameGeneral and UIPasteboardNameFind",
        "example": "UIPasteboardName",
        "regex": "UIPasteboardName",
        "output_file": "4_ios_UIPasteboardName.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "FTPURL",
        "example": "FTPURL",
        "regex": "FTPURL",
        "output_file": "4_ios_FTPURL.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "IOBluetooth",
        "example": "IOBluetooth",
        "regex": "IOBluetooth",
        "output_file": "4_ios_IOBluetooth.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS string format function initWithFormat. Just check if the first argument to these functions are user controlled, that could be a format string vulnerability.",
        "example": "initWithFormat:var",
        "regex": "initWithFormat:[^@]",
        "output_file": "4_ios_string_format_initWithFormat_narrow.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS string format function informativeTextWithFormat. Just check if the first argument to these functions are user controlled, that could be a format string vulnerability.",
        "example": "informativeTextWithFormat:var",
        "regex": "informativeTextWithFormat:[^@]",
        "output_file": "4_ios_string_format_informativeTextWithFormat_narrow.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS string format function format. Just check if the first argument to these functions are user controlled, that could be a format string vulnerability.",
        "example": "format:var",
        "regex": "format:[^@]",
        "output_file": "4_ios_string_format_format_narrow.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS string format function stringWithFormat. Just check if the first argument to these functions are user controlled, that could be a format string vulnerability.",
        "example": "stringWithFormat:var",
        "regex": "stringWithFormat:[^@]",
        "output_file": "4_ios_string_format_stringWithFormat_narrow.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS string format function stringByAppendingFormat. Just check if the first argument to these functions are user controlled, that could be a format string vulnerability.",
        "example": "stringByAppendingFormat:var",
        "regex": "stringByAppendingFormat:[^@]",
        "output_file": "4_ios_string_format_stringByAppendingFormat_narrow.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS string format function appendFormat. Just check if the first argument to these functions are user controlled, that could be a format string vulnerability.",
        "example": "appendFormat:var",
        "regex": "appendFormat:[^@]",
        "output_file": "4_ios_string_format_appendFormat_narrow.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS string format function alertWithMessageText. Just check if the first argument to these functions are user controlled, that could be a format string vulnerability.",
        "example": "alertWithMessageText:var",
        "regex": "alertWithMessageText:[^@]",
        "output_file": "4_ios_string_format_alertWithMessageText_narrow.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS string format function predicateWithFormat. Just check if the first argument to these functions are user controlled, that could be a format string vulnerability.",
        "example": "predicateWithFormat:var",
        "regex": "predicateWithFormat:[^@]",
        "output_file": "4_ios_string_format_predicateWithFormat_narrow.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS string format function NSRunAlertPanel. Just check if the first argument to these functions are user controlled, that could be a format string vulnerability.",
        "example": "NSRunAlertPanel:var",
        "regex": "NSRunAlertPanel:[^@]",
        "output_file": "4_ios_string_format_NSRunAlertPanel_narrow.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "CFBundleDocumentTypes defines in the Info.plist file what kind of documents can be opened with this application, example of such a handler can be found here: https://stackoverflow.com/questions/2774343/how-do-i-associate-file-types-with-an-iphone-application#2781290 . See also https://developer.apple.com/library/content/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/Inter-AppCommunication/Inter-AppCommunication.html .",
        "example": "CFBundleDocumentTypes",
        "regex": "CFBundleDocumentTypes",
        "output_file": "4_ios_CFBundleDocumentTypes.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "CFBundleURLTypes defines int he Info.plist file a custom URL handler that will trigger the application and is used as an IPC mechanism. See also https://developer.apple.com/library/content/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/Inter-AppCommunication/Inter-AppCommunication.html .",
        "example": "CFBundleURLTypes",
        "regex": "CFBundleURLTypes",
        "output_file": "4_ios_CFBundleURLTypes.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Check for SQL injection. See also https://github.com/felixgr/secure-ios-app-dev",
        "example": "sqlite3_prepare",
        "regex": "sqlite3_prepare",
        "output_file": "4_ios_sqlite3_prepare.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "CFDataRef might lead to memory corruption issues when incorrectly converted from/to C string, see also https://github.com/felixgr/secure-ios-app-dev",
        "example": "CFDataRef",
        "regex": "CFDataRef",
        "output_file": "4_ios_CFDataRef.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "CFStringRef might lead to memory corruption issues when incorrectly converted from/to C string, see also https://github.com/felixgr/secure-ios-app-dev",
        "example": "CFStringRef",
        "regex": "CFStringRef",
        "output_file": "4_ios_CFStringRef.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "NSString might lead to memory corruption issues when incorrectly converted from/to C string, see also https://github.com/felixgr/secure-ios-app-dev",
        "example": "NSString",
        "regex": "NSString",
        "output_file": "4_ios_NSString.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Format string vulnerable CFStringAppendFormat method, see also https://github.com/felixgr/secure-ios-app-dev",
        "example": "CFStringAppendFormat",
        "regex": "CFStringAppendFormat",
        "output_file": "4_ios_CFStringAppendFormat.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS NSFile",
        "example": "NSFile",
        "regex": "NSFile",
        "output_file": "5_ios_file_access_nsfile.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS writeToUrl",
        "example": "writeToUrl",
        "regex": "writeToUrl",
        "output_file": "5_ios_writeToUrl.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS UIWebView, see also https://github.com/felixgr/secure-ios-app-dev",
        "example": "UIWebView",
        "regex": "UIWebView",
        "output_file": "5_ios_UIWebView.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS shouldStartLoadWithRequest method of UIWebView in iOS",
        "example": "shouldStartLoadWithRequest",
        "regex": "shouldStartLoadWithRequest",
        "output_file": "5_ios_shouldStartLoadWithRequest.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS File protection APIs, NSDataWritingFileProtectionNone, NSDataWritingFileProtectionComplete, NSDataWritingFileProtectionCompleteUnlessOpen, NSDataWritingFileProtectionCompleteUntilFirstUserAuthentication",
        "example": "NSDataWritingFileProtectionNone",
        "regex": "NSData",
        "output_file": "5_ios_file_access_nsdata.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS Keychain stuff",
        "example": "Security.h",
        "regex": "Security\\.h",
        "output_file": "5_ios_keychain_security_h.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "CFStream",
        "example": "CFStream",
        "regex": "CFStream",
        "output_file": "5_ios_CFStream.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "CFHTTP",
        "example": "CFHTTP",
        "regex": "CFHTTP",
        "output_file": "5_ios_CFHTTP.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "CFNetServices",
        "example": "CFNetServices",
        "regex": "CFNetServices",
        "output_file": "5_ios_CFNetServices.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS string format function initWithFormat. Just check if the first argument to these functions are user controlled, that could be a format string vulnerability.",
        "example": "initWithFormat:",
        "regex": "initWithFormat:",
        "output_file": "5_ios_string_format_initWithFormat_wide.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS string format function informativeTextWithFormat. Just check if the first argument to these functions are user controlled, that could be a format string vulnerability.",
        "example": "informativeTextWithFormat:",
        "regex": "informativeTextWithFormat:",
        "output_file": "5_ios_string_format_informativeTextWithFormat_wide.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS string format function format. Just check if the first argument to these functions are user controlled, that could be a format string vulnerability.",
        "example": "format:",
        "regex": "format:",
        "output_file": "5_ios_string_format_format_wide.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS string format function stringWithFormat. Just check if the first argument to these functions are user controlled, that could be a format string vulnerability.",
        "example": "stringWithFormat:",
        "regex": "stringWithFormat:",
        "output_file": "5_ios_string_format_stringWithFormat_wide.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS string format function stringByAppendingFormat. Just check if the first argument to these functions are user controlled, that could be a format string vulnerability.",
        "example": "stringByAppendingFormat:",
        "regex": "stringByAppendingFormat:",
        "output_file": "5_ios_string_format_stringByAppendingFormat_wide.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS string format function appendFormat. Just check if the first argument to these functions are user controlled, that could be a format string vulnerability.",
        "example": "appendFormat:",
        "regex": "appendFormat:",
        "output_file": "5_ios_string_format_appendFormat_wide.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS string format function alertWithMessageText. Just check if the first argument to these functions are user controlled, that could be a format string vulnerability.",
        "example": "alertWithMessageText:",
        "regex": "alertWithMessageText:",
        "output_file": "5_ios_string_format_alertWithMessageText_wide.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS string format function predicateWithFormat. Just check if the first argument to these functions are user controlled, that could be a format string vulnerability.",
        "example": "predicateWithFormat:",
        "regex": "predicateWithFormat:",
        "output_file": "5_ios_string_format_predicateWithFormat_wide.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS string format function of NSException. Just check if the first argument to these functions are user controlled, that could be a format string vulnerability.",
        "example": "[NSException raise:format:]",
        "regex": ":format",
        "output_file": "5_ios_string_format.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS string format function NSRunAlertPanel. Just check if the first argument to these functions are user controlled, that could be a format string vulnerability.",
        "example": "NSRunAlertPanel:",
        "regex": "NSRunAlertPanel:",
        "output_file": "5_ios_string_format_NSRunAlertPanel_wide.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS URL handler handleOpenURL, also see https://github.com/felixgr/secure-ios-app-dev",
        "example": "handleOpenURL",
        "regex": "handleOpenURL",
        "output_file": "5_ios_string_format_url_handler_handleOpenURL.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "iOS URL handler openURL",
        "example": "openURL",
        "regex": "openURL",
        "output_file": "5_ios_string_format_url_handler_openURL.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "NSCoding, see also https://github.com/felixgr/secure-ios-app-dev",
        "example": "NSCoding",
        "regex": "NSCoding",
        "output_file": "5_ios_NSCoding.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Other deserialization (CFBundle, NSBundle, NSKeyedUnarchiverDelegate, didDecodeObject, awakeAfterUsingCoder) can directly lead to code execution by returning different objects during deserialization. See also https://github.com/felixgr/secure-ios-app-dev",
        "example": "CFBundle",
        "regex": "CFBundle",
        "output_file": "5_ios_CFBundle.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Other deserialization (CFBundle, NSBundle, NSKeyedUnarchiverDelegate, didDecodeObject, awakeAfterUsingCoder) can directly lead to code execution by returning different objects during deserialization. See also https://github.com/felixgr/secure-ios-app-dev",
        "example": "NSBundle",
        "regex": "NSBundle",
        "output_file": "5_ios_NSBundle.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Other deserialization (CFBundle, NSBundle, NSKeyedUnarchiverDelegate, didDecodeObject, awakeAfterUsingCoder) can directly lead to code execution by returning different objects during deserialization. See also https://github.com/felixgr/secure-ios-app-dev",
        "example": "NSKeyedUnarchiverDelegate",
        "regex": "NSKeyedUnarchiverDelegate",
        "output_file": "5_ios_NSKeyedUnarchiverDelegate.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Other deserialization (CFBundle, NSBundle, NSKeyedUnarchiverDelegate, didDecodeObject, awakeAfterUsingCoder) can directly lead to code execution by returning different objects during deserialization. See also https://github.com/felixgr/secure-ios-app-dev",
        "example": "didDecodeObject",
        "regex": "didDecodeObject",
        "output_file": "5_ios_didDecodeObject.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Other deserialization (CFBundle, NSBundle, NSKeyedUnarchiverDelegate, didDecodeObject, awakeAfterUsingCoder) can directly lead to code execution by returning different objects during deserialization. See also https://github.com/felixgr/secure-ios-app-dev",
        "example": "awakeAfterUsingCoder",
        "regex": "awakeAfterUsingCoder",
        "output_file": "5_ios_awakeAfterUsingCoder.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "NSLog",
        "example": "NSLog(",
        "regex": "NSLog\\(",
        "output_file": "6_ios_NSLog.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Can introduce XSS when simply writing a bean property to HTML without escaping. Attention: there are now client-side JavaScript libraries using the same tags for templates!",
        "example": "<%=bean.getName()%>",
        "regex": "<%=\\s{0,$WILDCARD_SHORT}[A-Za-z0-9_]{1,$WILDCARD_LONG}.get[A-Za-z0-9_]{1,$WILDCARD_LONG}\\(",
        "output_file": "1_java_jsp_property_to_html_xss.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Can introduce XSS when simply writing a bean property to HTML without escaping.",
        "example": "out.print(\"<option \"+bean.getName()+\"=jjjj\");",
        "regex": "out.printl?n?\\(\\\"<.{1,$WILDCARD_LONG}\\+.{1,$WILDCARD_LONG}\\);",
        "output_file": "1_java_jsp_out_print_to_html_xss2.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "SecretKeySpec is used to initialize a new encryption key: instance of SecretKey, often passed in the first argument as a byte[], which is the actual key",
        "example": "new SecretKeySpec(",
        "regex": "new\\sSecretKeySpec\\(",
        "output_file": "2_java_crypto_new-SecretKeySpec.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "PBEKeySpec(\\\" is used to initialize a new encryption key: instance of PBEKeySpec, often passed in the first argument as a byte[] like \\\"foobar\\\".getBytes(), which is the actual key. I leave this here for your amusement: https://github.com/wso2/wso2-synapse/blob/master/modules/securevault/src/main/java/org/apache/synapse/securevault/secret/handler/JBossEncryptionSecretCallbackHandler.java#L40 ",
        "example": "new PBEKeySpec(\"foobar\".getBytes());",
        "regex": "new\\sPBEKeySpec\\(\"",
        "output_file": "2_java_crypto_new-PBEKeySpec_str.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Problem with equals and equalsIgnoreCase for checking user supplied passwords or Hashes or HMACs or XYZ is that it is not a time-consistent method, therefore allowing timing attacks.",
        "example": ".equals(hash_from_request)",
        "regex": "equals\\(.{0,$WILDCARD_SHORT}[Hh][Aa][Ss][Hh]",
        "output_file": "2_java_string_comparison_equals_hash.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Problem with equals and equalsIgnoreCase for checking user supplied passwords or Hashes or HMACs or XYZ is that it is not a time-consistent method, therefore allowing timing attacks.",
        "example": ".equalsIgnoreCase(hash_from_request",
        "regex": "equalsIgnoreCase\\(.{0,$WILDCARD_SHORT}[Hh][Aa][Ss][Hh]",
        "output_file": "2_java_string_comparison_equalsIgnoreCase_hash.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Can introduce XSS",
        "example": "escape=false",
        "regex": "escape\\s{0,$WILDCARD_SHORT}=\\s{0,$WILDCARD_SHORT}'?\\\"?\\s{0,$WILDCARD_SHORT}false",
        "output_file": "2_java_jsp_xss_escape.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Can introduce XSS",
        "example": "escapeXml=false",
        "regex": "escapeXml\\s{0,$WILDCARD_SHORT}=\\s{0,$WILDCARD_SHORT}'?\\\"?\\s{0,$WILDCARD_SHORT}false",
        "output_file": "2_java_jsp_xss_escapexml.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "stripUnsafeHTML, method of the Spring Surf Framework can introduce things like XSS, because it is not really protecting.",
        "example": "stripUnsafeHTML",
        "regex": "stripUnsafeHTML",
        "output_file": "2_java_spring_stripUnsafeHTML.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "stripEncodeUnsafeHTML, method of the Spring Surf Framework can introduce thinks like XSS, because it is not really protecting.",
        "example": "stripEncodeUnsafeHTML",
        "regex": "stripEncodeUnsafeHTML",
        "output_file": "2_java_spring_stripEncodeUnsafeHTML.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Action mappings for struts where the validation is disabled",
        "example": "validate  =  \"false",
        "regex": "validate\\s{0,$WILDCARD_SHORT}=\\s{0,$WILDCARD_SHORT}'?\\\"?false",
        "output_file": "2_java_struts_deactivated_validation.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "see e.g. http://erpscan.com/press-center/struts2-devmode-rce-with-metasploit-module/",
        "example": "struts.devMode",
        "regex": "struts\\.devMode",
        "output_file": "2_java_struts_devMode.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "PBEKeySpec( is used to initialize a new encryption key: instance of PBEKeySpec, often passed in the first argument as a byte[], which is the actual key",
        "example": "new PBEKeySpec(",
        "regex": "new\\sPBEKeySpec\\(",
        "output_file": "3_java_crypto_new-PBEKeySpec.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "GenerateKey is another form of making a new instance of SecretKey, depending on the use case randomly generates one on the fly. It's interesting to see where the key goes next, where it's stored or accidentially written to a log file.",
        "example": ".generateKey()",
        "regex": "\\.generateKey\\(",
        "output_file": "3_java_crypto_generateKey.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Potential tainted input in string format.",
        "example": "String.format(\"bla-%s\"+taintedInput, variable);",
        "regex": "String\\.format\\(\\s{0,$WILDCARD_SHORT}\\\"[^\\\"]{1,$WILDCARD_LONG}\\\"\\s{0,$WILDCARD_SHORT}\\+",
        "output_file": "3_java_format_string1.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "HTTP session timeout",
        "example": "setMaxInactiveInterval()",
        "regex": "setMaxInactiveInterval\\(",
        "output_file": "3_java_servlet_setMaxInactiveInterval.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "CheckValidity method of X509Certificate in Java is a very confusing naming for developers new to SSL/TLS and has been used as the *only* check to see if a certificate is valid or not in the past. This method *only* checks the date-validity, see http://docs.oracle.com/javase/7/docs/api/java/security/cert/X509Certificate.html#checkValidity%28%29 : 'Checks that the certificate is currently valid. It is if the current date and time are within the validity period given in the certificate.'",
        "example": "paramArrayOfX509Certificate[0].checkValidity(); return;",
        "regex": "\\.checkValidity\\(",
        "output_file": "3_java_ssl_checkValidity.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "CheckServerTrusted, often used for certificate pinning on Java and Android, however, this is very very often insecure and not effective, see https://www.cigital.com/blog/ineffective-certificate-pinning-implementations/ . The correct method is to replace the system's TrustStore.",
        "example": "checkServerTrusted(",
        "regex": "checkServerTrusted\\(",
        "output_file": "3_java_checkServerTrusted.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "getPeerCertificates, often used for certificate pinning on Java and Android, however, this is very very often insecure and not effective, see https://www.cigital.com/blog/ineffective-certificate-pinning-implementations/ . The correct method is to replace the system's TrustStore.",
        "example": "getPeerCertificates(",
        "regex": "getPeerCertificates\\(",
        "output_file": "3_java_getPeerCertificates.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "getPeerCertificateChain, often used for certificate pinning on Java and Android, however, this is very very often insecure and not effective, see https://www.cigital.com/blog/ineffective-certificate-pinning-implementations/ . The correct method is to replace the system's TrustStore.",
        "example": "getPeerCertificateChain(",
        "regex": "getPeerCertificateChain\\(",
        "output_file": "3_java_getPeerCertificateChain.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "JSP file upload",
        "example": "<s:file test",
        "regex": "<s:file\\s",
        "output_file": "3_java_jsp_file_upload.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "DataBinder.setAllowedFields. See e.g. http://blog.fortify.com/blog/2012/03/23/Mass-Assignment-Its-Not-Just-For-Rails-Anymore .",
        "example": "DataBinder.setAllowedFields",
        "regex": "DataBinder\\.setAllowedFields",
        "output_file": "3_java_spring_mass_assignment.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Occurences of KeyGenerator.getInstance(ALGORITHM) it's interesting to see where the key goes next, where it's stored or accidentially written to a log file. Make sure the cipher is secure.",
        "example": "KeyGenerator.getInstance(",
        "regex": "KeyGenerator\\.getInstance\\(",
        "output_file": "4_java_crypto_keygenerator-getinstance.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Occurences of Cipher.getInstance(ALGORITHM) it's interesting to see where the key goes next, where it's stored or accidentially written to a log file. Make sure the cipher is secure.",
        "example": "Cipher.getInstance(\"RSA/NONE/NoPadding\");",
        "regex": "Cipher\\.getInstance\\(",
        "output_file": "4_java_crypto_cipher_getInstance.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Message digest is used to generate hashes",
        "example": "messagedigest",
        "regex": "messagedigest",
        "output_file": "4_java_crypto_messagedigest.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "KeyPairGenerator, well, to generate key pairs, see http://docs.oracle.com/javase/7/docs/api/java/security/KeyPairGenerator.html . It's interesting to see where the key goes next, where it's stored or accidentially written to a log file.",
        "example": "KeyPairGenerator(",
        "regex": "KeyPairGenerator\\(",
        "output_file": "4_java_crypto_keypairgenerator.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Method to set HTTP headers in Java",
        "example": ".setHeader(",
        "regex": "\\.setHeader\\(",
        "output_file": "4_java_http_setHeader.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Method to send HTTP redirect in Java",
        "example": ".sendRedirect(",
        "regex": "\\.sendRedirect\\(",
        "output_file": "4_java_http_sendRedirect.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Java add HTTP header",
        "example": ".addHeader(",
        "regex": "\\.addHeader\\(",
        "output_file": "4_java_http_addHeader.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Java get HTTP header",
        "example": ".getHeaders(",
        "regex": "\\.getHeaders\\(",
        "output_file": "4_java_http_getHeaders.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Java get HTTP cookies",
        "example": ".getCookies(",
        "regex": "\\.getCookies\\(",
        "output_file": "4_java_http_getCookies.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Java get remote host",
        "example": ".getRemoteHost(",
        "regex": "\\.getRemoteHost\\(",
        "output_file": "4_java_http_getRemoteHost.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Java get remote user",
        "example": ".getRemoteUser(",
        "regex": "\\.getRemoteUser\\(",
        "output_file": "4_java_http_getRemoteUser.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Java is secure",
        "example": ".isSecure(",
        "regex": "\\.isSecure\\(",
        "output_file": "4_java_http_isSecure.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Java get requested session ID",
        "example": ".getRequestedSessionId(",
        "regex": "\\.getRequestedSessionId\\(",
        "output_file": "4_java_http_getRequestedSessionId.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Potential tainted input in string format.",
        "example": "String.format(variable)",
        "regex": "String\\.format\\(\\s{0,$WILDCARD_SHORT}[^\\\"]",
        "output_file": "4_java_format_string2.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Validation in Java can be done via javax.validation. ",
        "example": "import javax.validation.bla;",
        "regex": "javax.validation",
        "output_file": "4_java_javax-validation.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "JSP redirect",
        "example": ".sendRedirect(",
        "regex": "\\.sendRedirect\\(",
        "output_file": "4_java_jsp_redirect.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "JSP redirect",
        "example": ".forward(",
        "regex": "\\.forward\\(",
        "output_file": "4_java_jsp_forward_1.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "JSP redirect",
        "example": ":forward",
        "regex": ":forward",
        "output_file": "4_java_jsp_forward_2.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Java generic JSP parameter get",
        "example": ".getParameter(",
        "regex": "\\.getParameter\\(",
        "output_file": "4_java_jsp_property_to_html_xss.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "RequestMapping method of the Spring Surf Framework to see how request URLs are mapped to classes.",
        "example": "@RequestMapping(method=RequestMethod.GET, value={\"/user\",\"/user/{id}\"})",
        "regex": "@RequestMapping\\(",
        "output_file": "4_java_spring_requestMapping.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "ServletMapping XML of the Spring Surf Framework to see how request URLs are mapped to classes.",
        "example": "<servlet-mapping><servlet-name>spring</servlet-name><url-pattern>*.html</url-pattern><url-pattern>/gallery/*</url-pattern><url-pattern>/galleryupload/*</url-pattern>",
        "regex": "<servlet-mapping>",
        "output_file": "4_java_spring_servletMapping.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "The Random class shouldn't be used for crypthography in Java, the SecureRandom should be used instead.",
        "example": "Random random = new Random();",
        "regex": "new Random\\(",
        "output_file": "5_java_crypto_random.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "The Math.random class shouldn't be used for crypthography in Java, the SecureRandom should be used instead.",
        "example": "Math.random();",
        "regex": "Math.random\\(",
        "output_file": "5_java_math_random.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "The syntax for SQL executions start with execute and this should as well catch generic execute calls.",
        "example": "executeBlaBla(",
        "regex": "execute.{0,$WILDCARD_SHORT}\\(",
        "output_file": "5_java_sql_execute.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "SQL syntax",
        "example": "addBatch(",
        "regex": "addBatch\\(",
        "output_file": "5_java_sql_addBatch.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "SQL prepared statements, can go wrong if you prepare after you use user supplied input in the query syntax...",
        "example": "prepareStatement(",
        "regex": "prepareStatement\\(",
        "output_file": "5_java_sql_prepareStatement.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Method to set HTTP headers in Java",
        "example": ".addCookie(",
        "regex": "\\.addCookie\\(",
        "output_file": "5_java_http_addCookie.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Java get content type",
        "example": ".getContentType(",
        "regex": "\\.getContentType\\(",
        "output_file": "5_java_http_getContentType.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Java HTTP or XML local name",
        "example": ".getLocalName(",
        "regex": "\\.getLocalName\\(",
        "output_file": "5_java_http_getLocalName.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Java ProcessBuilder",
        "example": "ProcessBuilder",
        "regex": "ProcessBuilder",
        "output_file": "5_java_ProcessBuilder.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "The source code shows the database table/column names... e.g. if you find a sql injection later on, this will help for the exploitation",
        "example": "@Column(",
        "regex": "@Column\\(",
        "output_file": "5_java_persistent_columns_in_database.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "The source code shows the database table/column names... e.g. if you find a sql injection later on, this will help for the exploitation",
        "example": "@Table(",
        "regex": "@Table\\(",
        "output_file": "5_java_persistent_tables_in_database.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Attention: SSLSocketFactory means in general you will skip SSL hostname verification because the SSLSocketFactory can't know which protocol (HTTP/LDAP/etc.) and therefore can't lookup the hostname. Even Apache's HttpClient version 3 for Java is broken: see https://crypto.stanford.edu/~dabo/pubs/abstracts/ssl-client-bugs.html",
        "example": "SSLSocketFactory",
        "regex": "SSLSocketFactory",
        "output_file": "5_java_SSLSocketFactory.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "A simple search for getRuntime().exec()",
        "example": "getRuntime().exec()",
        "regex": "getRuntime\\(\\)\\.exec\\(",
        "output_file": "5_java_runtime_exec_1.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "A search for Process p = r.exec()",
        "example": "Process p = r.exec(args1);",
        "regex": "Process.{0,$WILDCARD_SHORT}\\.exec\\(",
        "output_file": "5_java_runtime_exec_2.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "setAttribute is usually used to set an attribute of a session object, untrusted data should not be added to a session object",
        "example": "session.setAttribute(\"abc\", untrusted_input);",
        "regex": "\\.setAttribute\\(",
        "output_file": "5_java_setAttribute.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "StreamTokenizer, look for parsing errors, see https://docs.oracle.com/javase/7/docs/api/java/io/StreamTokenizer.html",
        "example": "StreamTokenizer",
        "regex": "StreamTokenizer",
        "output_file": "5_java_StreamTokenizer.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "getResourceAsStream, see http://docs.oracle.com/javase/7/docs/api/java/lang/Class.html#getResourceAsStream(java.lang.String)",
        "example": "getResourceAsStream",
        "regex": "getResourceAsStream",
        "output_file": "5_java_getResourceAsStream.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "String comparisons: Filters and conditional decisions on user input should better be done with .equalsIgnoreCase() in Java in most cases, so that the clause doesn't miss something (e.g. think about string comparison in filters) or long switch case. Another problem with equals and equalsIgnoreCase for checking user supplied passwords or Hashes or HMACs or XYZ is that it is not a time-consistent method, therefore allowing timing attacks.",
        "example": ".equals(",
        "regex": "equals\\(",
        "output_file": "6_java_string_comparison_equals.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "String comparisons: Filters and conditional decisions on user input should better be done with .equalsIgnoreCase() in Java in most cases, so that the clause doesn't miss something (e.g. think about string comparison in filters) or long switch case. Another problem with equals and equalsIgnoreCase for checking user supplied passwords or Hashes or HMACs or XYZ is that it is not a time-consistent method, therefore allowing timing attacks.",
        "example": ".equalsIgnoreCase(",
        "regex": "equalsIgnoreCase\\(",
        "output_file": "6_java_string_comparison_equalsIgnoreCase.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Java generic parameter fetching",
        "example": ".getParameterBlabla(",
        "regex": "\\.getParameter.{0,$WILDCARD_SHORT}\\(",
        "output_file": "6_java_http_getParameter.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Find out which Java Beans get persisted with javax.persistence",
        "example": "@Entity",
        "regex": "@Entity|@ManyToOne|@OneToMany|@OneToOne|@Table|@Column",
        "output_file": "6_java_persistent_beans.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Especially for high security applications. From http://docs.oracle.com/javase/1.5.0/docs/guide/security/jce/JCERefGuide.html#PBEEx : \\\"It would seem logical to collect and store the password in an object of type java.lang.String. However, here's the caveat: Objects of type String are immutable, i.e., there are no methods defined that allow you to change (overwrite) or zero out the contents of a String after usage. This feature makes String objects unsuitable for storing security sensitive information such as user passwords. You should always collect and store security sensitive information in a char array instead.\\\" ",
        "example": "String password",
        "regex": "string .{0,$WILDCARD_SHORT}password",
        "output_file": "6_java_confidential_data_in_strings_password.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Especially for high security applications. From http://docs.oracle.com/javase/1.5.0/docs/guide/security/jce/JCERefGuide.html#PBEEx : \\\"It would seem logical to collect and store the password in an object of type java.lang.String. However, here's the caveat: Objects of type String are immutable, i.e., there are no methods defined that allow you to change (overwrite) or zero out the contents of a String after usage. This feature makes String objects unsuitable for storing security sensitive information such as user passwords. You should always collect and store security sensitive information in a char array instead.\\\" ",
        "example": "String secret",
        "regex": "string .{0,$WILDCARD_SHORT}secret",
        "output_file": "6_java_confidential_data_in_strings_secret.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Especially for high security applications. From http://docs.oracle.com/javase/1.5.0/docs/guide/security/jce/JCERefGuide.html#PBEEx : \\\"It would seem logical to collect and store the password in an object of type java.lang.String. However, here's the caveat: Objects of type String are immutable, i.e., there are no methods defined that allow you to change (overwrite) or zero out the contents of a String after usage. This feature makes String objects unsuitable for storing security sensitive information such as user passwords. You should always collect and store security sensitive information in a char array instead.\\\" ",
        "example": "String key",
        "regex": "string .{0,$WILDCARD_SHORT}key",
        "output_file": "6_java_confidential_data_in_strings_key.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Especially for high security applications. From http://docs.oracle.com/javase/1.5.0/docs/guide/security/jce/JCERefGuide.html#PBEEx : \\\"It would seem logical to collect and store the password in an object of type java.lang.String. However, here's the caveat: Objects of type String are immutable, i.e., there are no methods defined that allow you to change (overwrite) or zero out the contents of a String after usage. This feature makes String objects unsuitable for storing security sensitive information such as user passwords. You should always collect and store security sensitive information in a char array instead.\\\" ",
        "example": "String cvv",
        "regex": "string .{0,$WILDCARD_SHORT}cvv",
        "output_file": "6_java_confidential_data_in_strings_cvv.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Especially for high security applications. From http://docs.oracle.com/javase/1.5.0/docs/guide/security/jce/JCERefGuide.html#PBEEx : \\\"It would seem logical to collect and store the password in an object of type java.lang.String. However, here's the caveat: Objects of type String are immutable, i.e., there are no methods defined that allow you to change (overwrite) or zero out the contents of a String after usage. This feature makes String objects unsuitable for storing security sensitive information such as user passwords. You should always collect and store security sensitive information in a char array instead.\\\" ",
        "example": "String user",
        "regex": "string .{0,$WILDCARD_SHORT}user",
        "output_file": "6_java_confidential_data_in_strings_user.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Especially for high security applications. From http://docs.oracle.com/javase/1.5.0/docs/guide/security/jce/JCERefGuide.html#PBEEx : \\\"It would seem logical to collect and store the password in an object of type java.lang.String. However, here's the caveat: Objects of type String are immutable, i.e., there are no methods defined that allow you to change (overwrite) or zero out the contents of a String after usage. This feature makes String objects unsuitable for storing security sensitive information such as user passwords. You should always collect and store security sensitive information in a char array instead.\\\" ",
        "example": "String passcode",
        "regex": "string .{0,$WILDCARD_SHORT}passcode",
        "output_file": "6_java_confidential_data_in_strings_passcode.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Especially for high security applications. From http://docs.oracle.com/javase/1.5.0/docs/guide/security/jce/JCERefGuide.html#PBEEx : \\\"It would seem logical to collect and store the password in an object of type java.lang.String. However, here's the caveat: Objects of type String are immutable, i.e., there are no methods defined that allow you to change (overwrite) or zero out the contents of a String after usage. This feature makes String objects unsuitable for storing security sensitive information such as user passwords. You should always collect and store security sensitive information in a char array instead.\\\" ",
        "example": "String passphrase",
        "regex": "string .{0,$WILDCARD_SHORT}passphrase",
        "output_file": "6_java_confidential_data_in_strings_passphrase.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Especially for high security applications. From http://docs.oracle.com/javase/1.5.0/docs/guide/security/jce/JCERefGuide.html#PBEEx : \\\"It would seem logical to collect and store the password in an object of type java.lang.String. However, here's the caveat: Objects of type String are immutable, i.e., there are no methods defined that allow you to change (overwrite) or zero out the contents of a String after usage. This feature makes String objects unsuitable for storing security sensitive information such as user passwords. You should always collect and store security sensitive information in a char array instead.\\\" ",
        "example": "String pin",
        "regex": "string .{0,$WILDCARD_SHORT}pin",
        "output_file": "6_java_confidential_data_in_strings_pin.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Especially for high security applications. From http://docs.oracle.com/javase/1.5.0/docs/guide/security/jce/JCERefGuide.html#PBEEx : \\\"It would seem logical to collect and store the password in an object of type java.lang.String. However, here's the caveat: Objects of type String are immutable, i.e., there are no methods defined that allow you to change (overwrite) or zero out the contents of a String after usage. This feature makes String objects unsuitable for storing security sensitive information such as user passwords. You should always collect and store security sensitive information in a char array instead.\\\" ",
        "example": "String creditcard_number",
        "regex": "string .{0,$WILDCARD_SHORT}credit",
        "output_file": "6_java_confidential_data_in_strings_credit.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "A simple search for getRuntime(), which is often used later on for .exec()",
        "example": "getRuntime()",
        "regex": "getRuntime\\(",
        "output_file": "6_java_getruntime.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "The function openProcess is included in apache commons and does a getRuntime().exec",
        "example": "p = openProcess(",
        "regex": "openProcess\\(",
        "output_file": "6_java_apache_common_openProcess.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "printStackTrace logs and should not be in production (also logs to Android log), information leakage, etc.",
        "example": ".printStackTrace()",
        "regex": "\\.printStackTrace\\(",
        "output_file": "6_java_printStackTrace.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "All javax.crypto usage",
        "example": "import javax.crypto.bla;",
        "regex": "javax.crypto",
        "output_file": "7_java_crypto_javax-crypto.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Bouncycastle is a common Java crypto provider",
        "example": "import org.bouncycastle.bla;",
        "regex": "bouncy.{0,$WILDCARD_SHORT}castle",
        "output_file": "7_java_crypto_bouncycastle.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Find out which Java classes do any kind of io",
        "example": "java.net.",
        "regex": "java\\.net\\.",
        "output_file": "7_java_io_java_net.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Find out which Java classes do any kind of io",
        "example": "java.io.",
        "regex": "java\\.io\\.",
        "output_file": "7_java_io_java_io.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Find out which Java classes do any kind of io",
        "example": "javax.servlet",
        "regex": "javax\\.servlet",
        "output_file": "7_java_io_javax_servlet.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Find out which Java classes do any kind of io",
        "example": "org.apache.http",
        "regex": "org\\.apache\\.http",
        "output_file": "7_java_io_apache_http.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "String comparisons have to be done with .equals() in Java, not with == (won't work). Attention: False positives often occur if you used a decompiler to get the Java code, additionally it's allowed in JavaScript.",
        "example": "    toString(  )    ==",
        "regex": "toString\\(\\s{0,$WILDCARD_SHORT}\\)\\s{0,$WILDCARD_SHORT}==",
        "output_file": "8_java_string_comparison1.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "String comparisons have to be done with .equals() in Java, not with == (won't work). Attention: False positives often occur if you used a decompiler to get the Java code, additionally it's allowed in JavaScript.",
        "example": " ==     toString() ",
        "regex": "==\\s{0,$WILDCARD_SHORT}toString\\(\\s{0,$WILDCARD_SHORT}\\)",
        "output_file": "8_java_string_comparison2.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "String comparisons have to be done with .equals() in Java, not with == (won't work). Attention: False positives often occur if you used a decompiler to get the Java code, additionally it's allowed in JavaScript.",
        "example": " ==     \"",
        "regex": "==\\s{0,$WILDCARD_SHORT}\\\"",
        "output_file": "8_java_string_comparison3.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "It's very easy to construct a backdoor in Java with Unicode \\u characters, even within multi line comments, see http://pastebin.com/iGQhuUGd and https://plus.google.com/111673599544007386234/posts/ZeXvRCRZ3LF .",
        "example": "\\u0041\\u0042",
        "regex": "\\\\u00..\\\\u00..",
        "output_file": "8_java_backdoor_as_unicode.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "All Strings between double quotes. Like the command line tool 'strings' for Java code.",
        "example": "String bla = \"This is a Java String\";",
        "regex": "\"[^\"]{4,500}\"",
        "output_file": "9_java_strings.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "RFC 4627 includes a parser regex example http://www.ietf.org/rfc/rfc4627.txt and it is insecure as explained in the 'the tangled web' book, as it allows incrementing and decrementing of certain variables.",
        "example": "var my_JSON_object = !(/[^,:{}\\[\\]0-9.\\-+Eaeflnr-u \\n\\r\\t]/.test( var my_JSON_object = !(/[^,:{}\\[\\]0-9.\\-+Eaeflnr-u \\n\\r\\t]/.test(eval(",
        "regex": "Eaeflnr-u",
        "output_file": "2_js_insecure_JSON_parser.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "The constructor for functions can be used as a replacement for eval, see https://sonarqube.com/coding_rules#types=VULNERABILITY|languages=js",
        "example": "f = new Function(\"name\", \"return 123 + name\"); ",
        "regex": "new\\sFunction.{0,$WILDCARD_SHORT}",
        "output_file": "3_js_new_function_eval.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Sensitive information in localStorage is not encrypted, see https://sonarqube.com/coding_rules#types=VULNERABILITY|languages=js",
        "example": "localStorage.setItem(\"data\", sensitive_data); ",
        "regex": "localStorage",
        "output_file": "3_js_localStorage.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Sensitive information in sessionStorage is not encrypted, see https://sonarqube.com/coding_rules#types=VULNERABILITY|languages=js",
        "example": "sessionStorage.setItem(\"data\", sensitive_data); ",
        "regex": "sessionStorage",
        "output_file": "3_js_sessionStorage.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Dynamic creation of script tag, where is it loading JavaScript from?",
        "example": "elem = createElement(\"script\");",
        "regex": "createElement.{0,$WILDCARD_SHORT}script",
        "output_file": "3_js_createElement_script.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Setting the document.domain influences the same origin policy.",
        "example": "document.domain = example.com",
        "regex": "document.domain\\s=",
        "output_file": "3_js_document_domain.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Frame communication in browsers with postMessage. PostMessage is one of the better ways of doing this.",
        "example": "parent.postMessage(\"user=bob\", \"https://example.com\");",
        "regex": "postMessage\\(",
        "output_file": "3_js_postMessage.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Frame communication in browsers with postMessage and the corresponding addEventListener.",
        "example": "addEventListener(\"message\", a_function, false);",
        "regex": "addEventListener.{0,$WILDCARD_SHORT}message",
        "output_file": "3_js_addEventListener_message.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "AllowScriptAccess allows or disallows ExternalInterface.call from an Applet to JavaScript.",
        "example": "AllowScriptAccess",
        "regex": "AllowScriptAccess",
        "output_file": "3_js_AllowScriptAccess.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "The mayscript attribute of <applet>, <embed> and <object> should be present, but they can be circumvented by DOMService if present",
        "example": "mayscript",
        "regex": "mayscript",
        "output_file": "3_js_mayscript.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Location hash: DOM-based XSS source/sink.",
        "example": "location.hash",
        "regex": "location\\.hash",
        "output_file": "4_js_dom_xss_location-hash.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Location href: DOM-based XSS source/sink.",
        "example": "location.href",
        "regex": "location\\.href",
        "output_file": "4_js_dom_xss_location-href.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Location pathname: DOM-based XSS source/sink.",
        "example": "location.pathname",
        "regex": "location\\.pathname",
        "output_file": "4_js_dom_xss_location-pathname.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Location search: DOM-based XSS source/sink.",
        "example": "location.search",
        "regex": "location\\.search",
        "output_file": "4_js_dom_xss_location-search.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "appendChild: DOM-based XSS sink.",
        "example": ".appendChild(",
        "regex": "\\.appendChild\\(",
        "output_file": "4_js_dom_xss_appendChild.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Document location: DOM-based XSS source/sink.",
        "example": "document.location",
        "regex": "document\\.location",
        "output_file": "4_js_dom_xss_document_location.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Window location: DOM-based XSS source/sink.",
        "example": "window.location",
        "regex": "window\\.location",
        "output_file": "4_js_dom_xss_window-location.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Document referrer: DOM-based XSS source/sink.",
        "example": "document.referrer",
        "regex": "document\\.referrer",
        "output_file": "4_js_dom_xss_document-referrer.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Document URL: DOM-based XSS source/sink.",
        "example": "document.URL",
        "regex": "document\\.URL",
        "output_file": "4_js_dom_xss_document-URL.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Document Write and variants of it: DOM-based XSS source/sink.",
        "example": "document.writeln(",
        "regex": "document\\.writel?n?\\(",
        "output_file": "4_js_dom_xss_document-write.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "InnerHTML: DOM-based XSS source/sink.",
        "example": ".innerHTML =",
        "regex": "\\.innerHTML\\s{0,$WILDCARD_SHORT}=",
        "output_file": "4_js_dom_xss_innerHTML.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "DangerouslySetInnerHTML: DOM-based XSS sink for React.js basically. Simply what's innerHTML is called dangerouslySetInnerHTML in React.",
        "example": "<div className=\"text\" dangerouslySetInnerHTML={{ __html: text }} />",
        "regex": "DangerouslySetInnerHTML\\s{0,$WILDCARD_SHORT}=",
        "output_file": "4_js_react_dom_xss_dangerouslySetInnerHTML.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "OuterHTML: DOM-based XSS source/sink.",
        "example": ".outerHTML =",
        "regex": "\\.outerHTML\\s{0,$WILDCARD_SHORT}=",
        "output_file": "4_js_dom_xss_outerHTML.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Console should not be logged to in production",
        "example": "console.log(user_password);",
        "regex": "console\\.",
        "output_file": "4_js_console.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "The postMessage in JavaScript should explicitly not be used with targetOrigin set to * and check how messages are exchanged, see https://sonarqube.com/coding_rules#types=VULNERABILITY|languages=js",
        "example": "aWindow.postMessage(message, \"*\");",
        "regex": "\\.postMessage\\(",
        "output_file": "4_js_postMessage.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Viagra search",
        "example": "viagra",
        "regex": "viagra",
        "output_file": "4_malware_viagra.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Potenzmittel is the German word mostly used for viagra",
        "example": "potenzmittel",
        "regex": "potenzmittel",
        "output_file": "4_malware_potenzmittel.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Pharmacy",
        "example": "pharmacy",
        "regex": "pharmacy",
        "output_file": "4_malware_pharmacy.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Drug",
        "example": "drug",
        "regex": "drug",
        "output_file": "4_malware_drug.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Root detection.",
        "example": "root detection",
        "regex": "root.{0,$WILDCARD_SHORT}detection",
        "output_file": "2_mobile_root_detection_root-detection.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Root detection.",
        "example": "RootedDevice",
        "regex": "root.{0,$WILDCARD_SHORT}Device",
        "output_file": "2_mobile_root_detection_root-device.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Root detection.",
        "example": "isRooted",
        "regex": "is.{0,$WILDCARD_SHORT}rooted",
        "output_file": "2_mobile_root_detection_isRooted.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Root detection.",
        "example": "detect root",
        "regex": "detect.{0,$WILDCARD_SHORT}root",
        "output_file": "2_mobile_root_detection_detectRoot.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Jailbreak.",
        "example": "jail_break",
        "regex": "jail.{0,$WILDCARD_SHORT}break",
        "output_file": "2_mobile_jailbreak.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Rather complex modsecurity constructs that are worth having a look.",
        "example": "ctl:auditEngine",
        "regex": "ctl:auditEngine",
        "output_file": "3_modsecurity_ctl_auditEngine.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Rather complex modsecurity constructs that are worth having a look.",
        "example": "ctl:ruleEngine",
        "regex": "ctl:ruleEngine",
        "output_file": "3_modsecurity_ctl_ruleEngine.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Rather complex modsecurity constructs that are worth having a look.",
        "example": "ctl:ruleRemoveById",
        "regex": "ctl:ruleRemoveById",
        "output_file": "3_modsecurity_ctl_ruleRemoveById.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Possible command injection when executing bash scripts.",
        "example": "exec:",
        "regex": "exec:",
        "output_file": "4_modsecurity_exec.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Modsecurity actively changing HTTP response content.",
        "example": "append:",
        "regex": "append:",
        "output_file": "4_modsecurity_append.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Modsecurity actively changing HTTP response content.",
        "example": "SecContentInjection",
        "regex": "SecContentInjection",
        "output_file": "4_modsecurity_SecContentInjection.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Modsecurity inspecting uploaded files.",
        "example": "@inspectFile",
        "regex": "@inspectFile",
        "output_file": "4_modsecurity_inspectFile.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Modsecurity audit configuration information.",
        "example": "SecAuditEngine",
        "regex": "SecAuditEngine",
        "output_file": "4_modsecurity_SecAuditEngine.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Modsecurity audit configuration information.",
        "example": "SecAuditLogParts",
        "regex": "SecAuditLogParts",
        "output_file": "4_modsecurity_SecAuditLogParts.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Block is not recommended to use because it is depending on default action, use deny (or allow)",
        "example": "block",
        "regex": "block",
        "output_file": "5_modsecurity_block.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "CURLOPT_SSL_VERIFYPEER should be set to TRUE, CURLOPT_SSL_VERIFYHOST should be set to 2, if there is a mixup, this can go really wrong. See https://crypto.stanford.edu/~dabo/pubs/abstracts/ssl-client-bugs.html",
        "example": "CURLOPT_SSL_VERIFYPEER",
        "regex": "CURLOPT_SSL_VERIFYPEER",
        "output_file": "1_php_verifypeer-verifypeer.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "CURLOPT_SSL_VERIFYPEER should be set to TRUE, CURLOPT_SSL_VERIFYHOST should be set to 2, if there is a mixup, this can go really wrong. See https://crypto.stanford.edu/~dabo/pubs/abstracts/ssl-client-bugs.html",
        "example": "CURLOPT_SSL_VERIFYHOST",
        "regex": "CURLOPT_SSL_VERIFYHOST",
        "output_file": "1_php_verifypeer-verifyhost.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "gnutls_certificate_verify_peers, see https://crypto.stanford.edu/~dabo/pubs/abstracts/ssl-client-bugs.html",
        "example": "gnutls_certificate_verify_peers",
        "regex": "gnutls_certificate_verify_peers",
        "output_file": "1_php_gnutls-certificate-verify-peers.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "fsockopen is not checking server certificates if used with a ssl:// URL. See https://crypto.stanford.edu/~dabo/pubs/abstracts/ssl-client-bugs.html",
        "example": "fsockopen (",
        "regex": "fsockopen\\s{0,$WILDCARD_SHORT}\\(",
        "output_file": "1_php_fsockopen.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Methods that often introduce XSS: echo in combination with \\$_POST.",
        "example": "echo $_POST[\"ABC\"]",
        "regex": "echo.{0,$WILDCARD_LONG}\\\\\\$_POST",
        "output_file": "1_php_echo_low_volume_POST.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Methods that often introduce XSS: echo in combination with \\$_GET.",
        "example": "echo $_GET[\"ABC\"]",
        "regex": "echo.{0,$WILDCARD_LONG}\\\\\\$_GET",
        "output_file": "1_php_echo_low_volume_GET.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Methods that often introduce XSS: echo in combination with \\$_COOKIE. And there is no good explanation usually why a cookie is printed to the HTML anyway (debug interface?).",
        "example": "echo $_COOKIE[\"ABC\"]",
        "regex": "echo.{0,$WILDCARD_LONG}\\\\\\$_COOKIE",
        "output_file": "1_php_echo_low_volume_COOKIE.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Methods that often introduce XSS: echo in combination with \\$_REQUEST.",
        "example": "echo $_REQUEST[\"ABC\"]",
        "regex": "echo.{0,$WILDCARD_LONG}\\\\\\$_REQUEST",
        "output_file": "1_php_echo_low_volume_REQUEST.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Methods that often introduce XSS: print in combination with \\$_POST.",
        "example": "print $_POST[\"ABC\"]",
        "regex": "print.{0,$WILDCARD_LONG}\\\\\\$_POST",
        "output_file": "1_php_print_low_volume_POST.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Methods that often introduce XSS: print in combination with \\$_GET.",
        "example": "print $_GET[\"ABC\"]",
        "regex": "print.{0,$WILDCARD_LONG}\\\\\\$_GET",
        "output_file": "1_php_print_low_volume_GET.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Methods that often introduce XSS: print in combination with \\$_COOKIE. And there is no good explanation usually why a cookie is printed to the HTML anyway (debug interface?).",
        "example": "print $_COOKIE[\"ABC\"]",
        "regex": "print.{0,$WILDCARD_LONG}\\\\\\$_COOKIE",
        "output_file": "1_php_print_low_volume_COOKIE.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Methods that often introduce XSS: print in combination with \\$_REQUEST. Don't use \\$_REQUEST in general.",
        "example": "print $_REQUEST[\"ABC\"]",
        "regex": "print.{0,$WILDCARD_LONG}\\\\\\$_REQUEST",
        "output_file": "1_php_print_low_volume_REQUEST.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Dangerous PHP function: passthru",
        "example": "passthru(",
        "regex": "passthru\\s{0,$WILDCARD_SHORT}\\(",
        "output_file": "2_php_passthru.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Dangerous PHP function: escapeshell",
        "example": "escapeshell",
        "regex": "escapeshell",
        "output_file": "2_php_escapeshell.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Dangerous PHP function: fopen",
        "example": "fopen(",
        "regex": "fopen\\s{0,$WILDCARD_SHORT}\\(",
        "output_file": "2_php_fopen.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Dangerous PHP function: proc_",
        "example": "proc_",
        "regex": "proc_",
        "output_file": "3_php_proc.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Dangerous PHP function: file_get_contents",
        "example": "file_get_contents (",
        "regex": "file_get_contents\\s{0,$WILDCARD_SHORT}\\(",
        "output_file": "3_php_file_get_contents.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Databases in PHP: pg_query",
        "example": "pg_query(",
        "regex": "pg_query\\s{0,$WILDCARD_SHORT}\\(",
        "output_file": "3_php_sql_pg_query.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Databases in PHP: mysqli_",
        "example": "mysqli_method(",
        "regex": "mysqli_.{1,$WILDCARD_SHORT}\\(",
        "output_file": "3_php_sql_mysqli.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Databases in PHP: mysql_",
        "example": "mysql_method(",
        "regex": "mysql_.{1,$WILDCARD_SHORT}\\(",
        "output_file": "3_php_sql_mysql.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Databases in PHP: mssql_",
        "example": "mssql_method(",
        "regex": "mssql_.{1,$WILDCARD_SHORT}\\(",
        "output_file": "3_php_sql_mssql.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Databases in PHP: odbc_exec",
        "example": "odbc_exec(",
        "regex": "odbc_exec\\s{0,$WILDCARD_SHORT}\\(",
        "output_file": "3_php_sql_odbc_exec.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Tainted input, GET URL parameter",
        "example": "$_GET",
        "regex": "\\$_GET",
        "output_file": "4_php_get.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Tainted input, POST parameter",
        "example": "$_POST",
        "regex": "\\$_POST",
        "output_file": "4_php_post.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Tainted input, cookie parameter",
        "example": "$_COOKIE",
        "regex": "\\$_COOKIE",
        "output_file": "4_php_cookie.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Tainted input. Using \\$_REQUEST is a bad idea in general, as that means GET/POST exchangeable and transporting sensitive information in the URL is a bad idea (see HTTP RFC -> ends up in logs, browser history, etc.).",
        "example": "$_REQUEST",
        "regex": "\\$_REQUEST",
        "output_file": "4_php_request.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Dangerous PHP function: imagecreatefrom",
        "example": "imagecreatefrom",
        "regex": "imagecreatefrom",
        "output_file": "4_php_imagecreatefrom.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Dangerous PHP function: link",
        "example": "link (",
        "regex": "link\\s{0,$WILDCARD_SHORT}\\(",
        "output_file": "4_php_link.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "You can make a lot of things wrong with include",
        "example": "include (",
        "regex": "include\\s{0,$WILDCARD_SHORT}\\(",
        "output_file": "4_php_include.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "You can make a lot of things wrong with include_once",
        "example": "include_once (",
        "regex": "include_once\\s{0,$WILDCARD_SHORT}\\(",
        "output_file": "4_php_include_once.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "You can make a lot of things wrong with require",
        "example": "require (",
        "regex": "require\\s{0,$WILDCARD_SHORT}\\(",
        "output_file": "4_php_require.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "You can make a lot of things wrong with require_once",
        "example": "require_once (",
        "regex": "require_once\\s{0,$WILDCARD_SHORT}\\(",
        "output_file": "4_php_require_once.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Extract can be dangerous and could be used as backdoor, see http://blog.sucuri.net/2014/02/php-backdoors-hidden-with-clever-use-of-extract-function.html#null",
        "example": "extract(",
        "regex": "extract\\s{0,$WILDCARD_SHORT}\\(",
        "output_file": "4_php_extract.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Dangerous PHP function: mkdir",
        "example": "mkdir (",
        "regex": "mkdir\\s{0,$WILDCARD_SHORT}\\(",
        "output_file": "5_php_mkdir.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Dangerous PHP function: chmod",
        "example": "chmod (",
        "regex": "chmod\\s{0,$WILDCARD_SHORT}\\(",
        "output_file": "5_php_chmod.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Dangerous PHP function: chown",
        "example": "chown (",
        "regex": "chown\\s{0,$WILDCARD_SHORT}\\(",
        "output_file": "5_php_chown.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Dangerous PHP function: rmdir",
        "example": "rmdir (",
        "regex": "rmdir\\s{0,$WILDCARD_SHORT}\\(",
        "output_file": "5_php_rmdir.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Methods that often introduce XSS: echo",
        "example": "echo",
        "regex": "echo",
        "output_file": "5_php_echo_high_volume.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Methods that often introduce XSS: print",
        "example": "print",
        "regex": "print",
        "output_file": "5_php_print_high_volume.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "PHP rand(): This is not a secure random.",
        "example": "rand(",
        "regex": "rand\\s{0,$WILDCARD_SHORT}\\(",
        "output_file": "5_php_rand.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Assert can be used as backdoor, see http://rileykidd.com/2013/08/21/the-backdoor-you-didnt-grep/",
        "example": "assert(",
        "regex": "assert\\s{0,$WILDCARD_SHORT}\\(",
        "output_file": "5_php_assert.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Preg_replace can be used as backdoor, see http://labs.sucuri.net/?note=2012-05-21",
        "example": "preg_replace(",
        "regex": "preg_replace\\s{0,$WILDCARD_SHORT}\\(",
        "output_file": "5_php_preg_replace.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "The big problem with == is that in PHP (and some other languages), this comparison is not type safe. What you should always use is ===. For example a hash value that starts with 0E could be interpreted as an integer if you don't take care. There were real world bugs exploiting this issue already, think login form and comparing the hashed user password, what happens if you type in 0 as the password and brute force different usernames until a user has a hash which starts with 0E?",
        "example": "hashvalue_from_db == PBKDF2(password_from_login_http_request)",
        "regex": "[^=]==[^=]",
        "output_file": "6_php_type_unsafe_comparison.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Dangerous PHP function: file",
        "example": "file (",
        "regex": "file\\s{0,$WILDCARD_SHORT}\\(",
        "output_file": "7_php_file.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "The shell=True named argument of the subprocess module makes command injection possible, see https://access.redhat.com/blogs/766093/posts/2592591",
        "example": "subprocess.call(unvalidated_input, shell=True)",
        "regex": "shell=True",
        "output_file": "2_python_subprocess_shell_true.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "shutil.copyfile is flawed as it creates the destination in the most insecure manner possible, see https://access.redhat.com/blogs/766093/posts/2592591",
        "example": "shutil.copyfile(src, dst)",
        "regex": "copyfile\\s{0,$WILDCARD_SHORT}\\(",
        "output_file": "2_python_shutil_copyfile.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Input function in Python 2.X is dangerous (but not in python 3.X), as it read from stdin and then evals the input, see https://access.redhat.com/blogs/766093/posts/2592591",
        "example": "input()",
        "regex": "input\\s{0,$WILDCARD_SHORT}\\(",
        "output_file": "3_python_input_function.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Assert statements are not compiled into the optimized byte code, therefore can not be used for security purposes, see https://access.redhat.com/blogs/766093/posts/2592591",
        "example": "assert variable and other",
        "regex": "assert\\s{1,$WILDCARD_SHORT}",
        "output_file": "3_python_assert_statement.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "The float type can not be reliably compared for equality, see https://access.redhat.com/blogs/766093/posts/2592591",
        "example": "2.2 * 3.0 == 3.3 * 2.2",
        "regex": "\\d\\.\\d{1,$WILDCARD_SHORT}\\s{1,$WILDCARD_SHORT}==\\s{1,$WILDCARD_SHORT}",
        "output_file": "3_python_float_equality_left.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "The float type can not be reliably compared for equality, see https://access.redhat.com/blogs/766093/posts/2592591",
        "example": "2.2 * 3.0 == 3.3 * 2.2",
        "regex": "\\s{1,$WILDCARD_SHORT}==\\s{1,$WILDCARD_SHORT}\\d\\.\\d{1,$WILDCARD_SHORT}",
        "output_file": "3_python_float_equality_right.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "The float type can not be reliably compared for equality. Make sure none of these comparisons uses floats, see https://access.redhat.com/blogs/766093/posts/2592591",
        "example": "2.2 * 3.0 == 3.3 * 2.2",
        "regex": "\\s{1,$WILDCARD_SHORT}==\\s{1,$WILDCARD_SHORT}",
        "output_file": "3_python_float_equality_general.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Double underscore variable visibility can be tricky, see https://access.redhat.com/blogs/766093/posts/2592591",
        "example": "self.__private",
        "regex": "self\\.__",
        "output_file": "3_python_double_underscore_general.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Doing things with __code__ is very low level",
        "example": "object.__code__",
        "regex": "__code__",
        "output_file": "3_python_double_underscore_code.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "mktemp of the tempfile module is flawed, see https://access.redhat.com/blogs/766093/posts/2592591",
        "example": "tempfile.mktemp()",
        "regex": "mktemp\\s{0,$WILDCARD_SHORT}\\(",
        "output_file": "3_python_tempfile_mktemp.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "shutil.move is flawed and silently leaves the old file behind if the source and destination are on different file systems, see https://access.redhat.com/blogs/766093/posts/2592591",
        "example": "shutil.move(src, dst)",
        "regex": "move\\s{0,$WILDCARD_SHORT}\\(",
        "output_file": "3_python_shutil_move.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "yaml.load is flawed and uses pickle to deserialize its data, which leads to code execution, see https://access.redhat.com/blogs/766093/posts/2592591 . The proper way is to use safe_load.",
        "example": "import yaml",
        "regex": "import\\s{0,$WILDCARD_SHORT}yaml",
        "output_file": "3_python_yaml_import.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "pickle leads to code execution if untrusted input is deserialized, see https://access.redhat.com/blogs/766093/posts/2592591",
        "example": "import pickle",
        "regex": "import\\s{0,$WILDCARD_SHORT}pickle",
        "output_file": "3_python_pickle_import.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "pickle leads to code execution if untrusted input is deserialized, see https://access.redhat.com/blogs/766093/posts/2592591",
        "example": "from pickle",
        "regex": "from\\s{0,$WILDCARD_SHORT}pickle",
        "output_file": "3_python_pickle_from.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "shelve leads to code execution if untrusted input is deserialized, see https://access.redhat.com/blogs/766093/posts/2592591",
        "example": "import shelve",
        "regex": "import\\s{0,$WILDCARD_SHORT}shelve",
        "output_file": "3_python_shelve_import.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "shelve leads to code execution if untrusted input is deserialized, see https://access.redhat.com/blogs/766093/posts/2592591",
        "example": "from shelve",
        "regex": "from\\s{0,$WILDCARD_SHORT}shelve",
        "output_file": "3_python_shelve_from.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "jinja2 in its default configuration leads to XSS if untrusted input is used for rendering, see https://access.redhat.com/blogs/766093/posts/2592591",
        "example": "import jinja2",
        "regex": "import\\s{0,$WILDCARD_SHORT}jinja2",
        "output_file": "3_python_jinja2_import.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "jinja2 in its default configuration leads to XSS if untrusted input is used for rendering, see https://access.redhat.com/blogs/766093/posts/2592591",
        "example": "from jinja2",
        "regex": "from\\s{0,$WILDCARD_SHORT}jinja2",
        "output_file": "3_python_jinja2_from.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "The 'is' object identity operator should not be used for numbers, see https://access.redhat.com/blogs/766093/posts/2592591",
        "example": "1+1 is 2",
        "regex": "\\d\\s{1,$WILDCARD_SHORT}is\\s{1,$WILDCARD_SHORT}",
        "output_file": "4_python_is_object_identity_operator_left.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "The 'is' object identity operator should not be used for numbers, see https://access.redhat.com/blogs/766093/posts/2592591",
        "example": "1+1 is 2",
        "regex": "\\s{1,$WILDCARD_SHORT}is\\s{1,$WILDCARD_SHORT}\\d",
        "output_file": "4_python_is_object_identity_operator_right.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "The 'is' object identity operator should not be used for numbers, see https://access.redhat.com/blogs/766093/posts/2592591",
        "example": "object.an_integer is other_object.other_integer",
        "regex": "\\sis\\s",
        "output_file": "4_python_is_object_identity_operator_general.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Basic authentication in ruby with http_basic_authenticate_with",
        "example": "http_basic_authenticate_with",
        "regex": "http_basic_authenticate_with",
        "output_file": "2_ruby_http_basic_authenticate_with.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Possible deserialization issues, see https://github.com/presidentbeef/brakeman/blob/master/lib/brakeman/checks/check_deserialize.rb",
        "example": ":YAML",
        "regex": ":YAML",
        "output_file": "2_ruby_yaml.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Possible deserialization issues, see https://github.com/presidentbeef/brakeman/blob/master/lib/brakeman/checks/check_deserialize.rb",
        "example": ":load",
        "regex": ":load",
        "output_file": "2_ruby_load.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Possible deserialization issues, see https://github.com/presidentbeef/brakeman/blob/master/lib/brakeman/checks/check_deserialize.rb",
        "example": ":load_documents",
        "regex": ":load_documents",
        "output_file": "2_ruby_load_documents.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Possible deserialization issues, see https://github.com/presidentbeef/brakeman/blob/master/lib/brakeman/checks/check_deserialize.rb",
        "example": ":load_stream",
        "regex": ":load_stream",
        "output_file": "2_ruby_load_stream.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Possible deserialization issues, see https://github.com/presidentbeef/brakeman/blob/master/lib/brakeman/checks/check_deserialize.rb",
        "example": ":parse_documents",
        "regex": ":parse_documents",
        "output_file": "2_ruby_parse_documents.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Possible deserialization issues, see https://github.com/presidentbeef/brakeman/blob/master/lib/brakeman/checks/check_deserialize.rb",
        "example": ":parse_stream",
        "regex": ":parse_stream",
        "output_file": "2_ruby_parse_stream.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Detailed exceptions shown, see https://github.com/presidentbeef/brakeman/blob/master/lib/brakeman/checks/check_detailed_exceptions.rb",
        "example": ":show_detailed_exceptions",
        "regex": ":show_detailed_exceptions",
        "output_file": "2_ruby_show_detailed_exceptions.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Spawning a subshell? See https://github.com/presidentbeef/brakeman/blob/master/lib/brakeman/checks/check_execute.rb",
        "example": ":capture2e",
        "regex": ":capture",
        "output_file": "2_ruby_capture.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "XSRF protection in ruby. See http://api.rubyonrails.org/classes/ActionController/RequestForgeryProtection/ClassMethods.html",
        "example": "protect_from_forgery",
        "regex": "protect_from_forgery",
        "output_file": "2_ruby_protect_from_forgery.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "HTTP redirects in ruby. See https://github.com/presidentbeef/brakeman/blob/master/lib/brakeman/checks/check_redirect.rb",
        "example": ":redirect_to",
        "regex": ":redirect_to",
        "output_file": "2_ruby_redirect_to.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Authenticity token verficiation skipped? See https://github.com/presidentbeef/brakeman/blob/master/lib/brakeman/checks/check_skip_before_filter.rb",
        "example": "verify_authenticity_token",
        "regex": "verify_authenticity_token",
        "output_file": "2_ruby_verify_authenticity_token.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Regex function that allows anything after a newline, \\\\A and \\\\z has to be used in regex to prevent this, see https://github.com/presidentbeef/brakeman/blob/master/lib/brakeman/checks/check_validation_regex.rb",
        "example": "validates_format_of",
        "regex": "validates_format_of",
        "output_file": "2_ruby_validates_format_of.txt"
    },
    {
        "tool": "https://github.com/floyd-fuh/crass",
        "description": "Content tag can lead to XSS, see https://github.com/presidentbeef/brakeman/blob/master/lib/brakeman/checks/check_content_tag.rb",
        "example": "content_tag :tag, body",
        "regex": "content_tag",
        "output_file": "3_ruby_content_tag.txt"
    }
]